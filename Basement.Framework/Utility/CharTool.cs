using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using System.Text.RegularExpressions;
using System.Net;
using System.IO;
using System.Data;

namespace Basement.Framework.Utility
{
    #region = 字符处理 =
    public sealed class CharTool
    {
        public enum ChnLang
        {
            /// <summary>
            /// 中文（中国大陆）
            /// </summary>
            GB2312 = 936,
            /// <summary>
            /// 中文（中国台湾）
            /// </summary>
            Big5 = 950 //
        }

        #region Generate random value
        /// <summary>
        /// Generate random value 
        /// </summary>
        /// <param name="digit">generate length</param>
        /// <returns></returns>
        public static string GenerateCheckCode(int digit)
        {
            int number;
            char code;
            string checkCode = String.Empty;

            System.Random random = new Random();

            for (int i = 0; i < digit; i++)
            {
                number = random.Next();

                if (number % 2 == 0)
                    code = (char)('0' + (char)(number % 10));
                else
                    code = (char)('A' + (char)(number % 26));

                checkCode += code.ToString();
            }

            HttpContext.Current.Response.Cookies.Add(new HttpCookie("CheckCode", checkCode));

            return checkCode;
        }
        #endregion

        #region = IsNumeric =
        /// <summary>
        /// 返回 Boolean 值指明表达式的值是否为数字。
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  IsNumeric(expression)
        /// </remarks>
        /// <param name="Str">参数可以是任意表达式。</param>
        /// <returns>表达式的值是否为数字</returns>
        public static bool IsNumeric(string Str)
        {
            if (string.IsNullOrEmpty(Str) == true)
            {
                return false;
            }

            int result = 0;

            return (int.TryParse(Str, out result));
        }
        #endregion

        #region = Left =
        /// <summary>
        /// 返回指定数目的从字符串的左边算起的字符。
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  Left(string, length)
        /// </remarks>
        /// <param name="s">字符串表达式，其最左边的字符被返回。如果 string 参数中包含 Null，则返回 Null。</param>
        /// <param name="n">
        /// 数值表达式，指明要返回的字符数目。如果是 0，返回零长度字符串 ("")；如果大于或等于 string 参数中的字符总数，
        /// 则返回整个字符串。
        /// </param>
        /// <returns>返回指定数目的字符串</returns>
        public static string Left(string s, int n)
        {
            if (s == "" || s == null)
            {
                return null;
            }

            if (n <= 0 || n > s.Length) return s;

            return s.Substring(0, n);
        }
        #endregion

        #region = Right =
        /// <summary>
        /// 从字符串右边返回指定数目的字符。
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  Right(string, length)
        /// </remarks>
        /// <param name="s">字符串表达式，其最右边的字符被返回。如果 string 参数中包含 Null，则返回 Null。</param>
        /// <param name="n">
        /// 数值表达式，指明要返回的字符数目。如果为 0，返回零长度字符串；
        /// 如果此数大于或等于 string 参数中的所有字符数目，则返回整个字符串。
        /// </param>
        /// <returns>返回指定数目的字符串</returns>
        public static string Right(string s, int n)
        {
            if (s == "" || s == null)
            {
                return null;
            }

            if (n <= 0 || n > s.Length) return s;

            return s.Substring(s.Length - n);
        }
        #endregion

        #region = Html2Text =
        /// <summary>
        /// HTML2s the text.
        /// </summary>
        /// <param name="strHTML">The STR HTML.</param>
        /// <returns></returns>
        [Obsolete("HtmlHelper.ConvertToText")]
        public static string Html2Text(string strHTML)
        {
            return HtmlTool.Instance(strHTML).ConvertToText();
        }

        #endregion

        #region = HtmlEncode =
        /// <summary>
        /// 将特殊字元转成 HTML 格式。
        /// </summary>
        /// <remarks>
        /// e.g.:  
        ///  HtmlEncode(string)
        /// 本函式将特殊字元转成 HTML 的字串格式 ( &....; )。最常用到的场合可能就是处理客户留言的留言版了。
        /// & (和) 转成 &amp; 
        /// " (双引号) 转成 &quot; 
        /// < (小于) 转成 &lt; 
        /// > (大于) 转成 &gt; 
        /// 此函式只转换上面的特殊字元，并不会全部转换成 HTML 所定的 ASCII 转换。 
        /// </remarks>
        /// <param name="str">字符串表达式，所有 string 的字元都转成 HTML 的特殊字集字串。如果 string 参数中包含 Null，则返回 ""</param>
        /// <returns>字串</returns>
        [Obsolete("HtmlHelper.Encode")]
        public static string HtmlEncode(string str)
        {
            if (str == null)
            {
                return string.Empty;
            }

            //string chrChang;

            //str = HttpUtility.HtmlEncode(str);

            //str = str.Replace("<", "&lt;");
            //str = str.Replace(">", "&gt;");
            //str = str.Replace("&", "&amp;");

            //chrChang = ((char)13).ToString();
            //str = str.Replace(chrChang, "<br/>");

            //chrChang = ((char)34).ToString();
            //str = str.Replace(chrChang, "&quot;");

            //chrChang = ((char)32).ToString();
            //str = str.Replace(chrChang, "&nbsp;");

            //chrChang = ((char)10).ToString();
            //str = str.Replace(chrChang, string.Empty);

            HtmlTool html = new HtmlTool(str);

            return html.Encode();
        }
        #endregion

        #region = 获取网页内容 =
        /// <summary>
        /// 获取网页内容
        /// </summary>
        /// <remarks>
        /// e.g.:  
        /// GetWebPage(URL)
        /// </remarks>
        /// <param name="sUrl">一个标准的URL</param>
        /// <param name="compress">是否压缩</param>
        /// <returns>返回该网页的HTML代码</returns>
        public static string GetWebPage(string sUrl)
        {
            return GetWebPage(sUrl, true);
        }

        public static string GetWebPage(string sUrl, bool compress)
        {
            Encoding enc = Encoding.GetEncoding("GB2312");
            return GetWebPage(sUrl, compress, enc);
        }

        public static string GetWebPage(string sUrl, bool compress, Encoding enc)
        {
            HttpWebRequest req = (HttpWebRequest)WebRequest.Create(sUrl);
            req.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; Q312461; .NET CLR 1.0.3705)";

            HttpWebResponse res = null;
            try
            {
                using (res = (HttpWebResponse)req.GetResponse())
                {
                    if (res.StatusCode == HttpStatusCode.OK)
                    {
                        string sHtml = string.Empty;
                        using (StreamReader sr = new StreamReader(res.GetResponseStream(), enc))
                        {
                            sHtml = sr.ReadToEnd();
                        }


                        if (compress == true)
                        {
                            HtmlTool html = new HtmlTool(sHtml);
                            sHtml = html.Compress();
                        }

                        return sHtml;
                    }
                    else
                    {
                        return "Error";
                    }
                }
            }
            catch
            {
                return "Error";
            }
            finally
            {
                if (res != null)
                {
                    res.Close();
                }
            }
        }
        #endregion

        #region = 压缩HTML =
        [Obsolete("HtmlHelper.Compress")]
        public static string CompressHTML(string sHtml)
        {
            HtmlTool html = new HtmlTool(sHtml);

            return html.Compress();
        }
        #endregion

        #region = 提取HTML控件的指定属性 =
        [Obsolete("HtmlHelper.PickupAttribute")]
        public static string[] PickupHTMLControlAttribute(string HTML, string TagName, string AttributeName)
        {
            HtmlTool html = new HtmlTool(HTML);
            return html.PickupAttribute(TagName, AttributeName);
        }

        [Obsolete("HtmlHelper.PickupAttribute")]
        public static string[] PickupHTMLControlAttribute(string HTML, string TagName, string AttributeName, Uri RemoteUri, string ExtensionName)
        {
            HtmlTool html = new HtmlTool(HTML);
            return html.PickupAttribute(TagName, AttributeName, RemoteUri, ExtensionName);
        }
        #endregion

        #region = GB2Big5 =
        /// <summary>
        /// 简体转换为繁体
        /// </summary>
        /// <remarks>
        /// e.g.:  
        /// GB2Big5(gb2312)
        /// </remarks>
        /// <param name="sUrl">一个简体的字符串</param>
        /// <returns>返回相应的繁体字符串</returns>
        public static string GB2Big5(string gb2312)
        {
            return Microsoft.VisualBasic.Strings.StrConv(gb2312, Microsoft.VisualBasic.VbStrConv.TraditionalChinese, System.Globalization.CultureInfo.CurrentCulture.LCID);
        }
        #endregion

        #region = 字符截断 =
        /// <summary>
        /// Truncates the specified s.
        /// </summary>
        /// <param name="s">The s.</param>
        /// <param name="length">The length.</param>
        /// <returns></returns>
        public static string Truncate(string text, int length)
        {

            if (length < 1 || string.IsNullOrEmpty(text) == true)
            {
                return text;
            }

            char[] TextDir = HtmlTool.RemoveHtml(text).Replace(" ", string.Empty).ToCharArray();
            char[] CharDir = text.ToCharArray(); //字符表

            int index = 0; //字符表的定位
            int count = 0; //目前的位置
            StringBuilder str = new StringBuilder();
            foreach (char c in TextDir)
            {
                while (index < CharDir.Length && c != CharDir[index])
                {
                    str.Append(CharDir[index]);
                    index++;
                    if (CharDir.Length < index) //防止数组溢出
                    {
                        break;
                    }
                }
                count += FindCharWidth(c);

                if (count / 12 > length)
                {
                    str.Append("…");
                    break;
                }
                str.Append(c);
                index++;
                if (CharDir.Length < index) //防止数组溢出
                {
                    break;
                }
            }
            return str.ToString();
        }

        private static int FindCharWidth(char c)
        {
            //int[] charcode = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 224, 225, 232, 233, 234, 236, 237, 242, 243, 249, 250, 252, 257, 275, 283, 299, 324, 328, 333, 363, 462, 464, 466, 468, 470, 472, 474, 476, 593, 609, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 1025, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1105, 8364, 59335, 59336, 59393, 59394, 59395, 59396, 59397 };
            //int[] charlangth = new int[] { 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 3, 3, 8, 8, 8, 8, 8, 5, 5, 5, 3, 8, 8, 8, 8, 5, 3, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 7, 8, 7, 8, 9, 9, 8, 9, 9, 9, 8, 9, 9, 7, 7, 8, 8, 8, 9, 9, 9, 8, 8, 5, 8, 5, 5, 8, 8, 3, 8, 8, 8, 8, 5, 8, 8, 8, 8, 5, 8, 7, 8, 8, 8, 7, 9, 7, 8, 7, 8, 7, 11, 8, 9, 9, 8, 8, 9, 9, 9, 7, 8, 8, 9, 9, 9, 9, 8, 8, 10, 7, 8, 8, 5, 8, 8, 5, 8, 5, 8, 5, 8, 8, 8, 8, 7, 8, 8, 8, 7, 5, 5, 7, 8, 5, 8, 8, 9, 9, 8, 8, 8, 5, 9, 8, 5, 8, 8, 8, 5, 7, 7, 7, 7 };

            //int asc = (int)c;

            //for (int i = 0; i < charcode.Length; i++)
            //{
            //    if (asc == charcode[i])
            //    {
            //        return charlangth[i];
            //    }
            //}

            //return 12;

            int code = (int)c;

            int[] charcode = new int[] { 65533, 65532, 65519, 65512, 65511, 65504, 65501, 65498, 65496, 65490, 65488, 65482, 65480, 65474, 65471, 65440, 65438, 65434, 65433, 65432, 65431, 65430, 65429, 65428, 65427, 65426, 65425, 65424, 65421, 65420, 65419, 65418, 65417, 65416, 65415, 65413, 65412, 65409, 65407, 65405, 65404, 65403, 65402, 65401, 65400, 65399, 65398, 65395, 65394, 65392, 65391, 65390, 65385, 65384, 65383, 65382, 65377, 65280, 65279, 65277, 65276, 65275, 65274, 65273, 65272, 65271, 65270, 65269, 65267, 65266, 65265, 65264, 65263, 65261, 65260, 65259, 65258, 65257, 65255, 65253, 65251, 65249, 65247, 65245, 65243, 65241, 65239, 65237, 65235, 65233, 65232, 65231, 65230, 65229, 65228, 65227, 65226, 65217, 65215, 65213, 65211, 65209, 65207, 65205, 65203, 65201, 65197, 65193, 65190, 65189, 65186, 65185, 65182, 65181, 65179, 65177, 65175, 65173, 65172, 65171, 65169, 65167, 65166, 65165, 65163, 65162, 65161, 65160, 65159, 65157, 65156, 65155, 65154, 65153, 65152, 65151, 65150, 65149, 65148, 65147, 65146, 65145, 65144, 65143, 65142, 65141, 65140, 65139, 65138, 65137, 65136, 65132, 65128, 65127, 65108, 65107, 65072, 65060, 65050, 65040, 65024, 65022, 65021, 65020, 65017, 65016, 65011, 65010, 65008, 64976, 64955, 64954, 64950, 64949, 64912, 64911, 64910, 64909, 64907, 64906, 64905, 64904, 64903, 64902, 64830, 64829, 64828, 64819, 64817, 64816, 64813, 64811, 64809, 64805, 64801, 64795, 64791, 64785, 64784, 64783, 64781, 64780, 64777, 64773, 64767, 64763, 64757, 64754, 64753, 64752, 64751, 64750, 64749, 64748, 64747, 64742, 64741, 64740, 64739, 64738, 64737, 64736, 64735, 64734, 64733, 64730, 64729, 64727, 64726, 64725, 64722, 64721, 64718, 64717, 64716, 64711, 64708, 64707, 64706, 64705, 64702, 64701, 64700, 64699, 64698, 64696, 64695, 64692, 64691, 64689, 64688, 64685, 64684, 64683, 64682, 64681, 64680, 64679, 64678, 64677, 64676, 64673, 64672, 64671, 64670, 64669, 64668, 64667, 64666, 64663, 64660, 64659, 64657, 64656, 64653, 64652, 64650, 64649, 64648, 64646, 64645, 64643, 64642, 64641, 64640, 64636, 64633, 64632, 64630, 64627, 64626, 64624, 64621, 64620, 64618, 64615, 64614, 64612, 64611, 64606, 64604, 64603, 64601, 64600, 64597, 64595, 64593, 64591, 64590, 64587, 64585, 64581, 64579, 64578, 64576, 64575, 64573, 64572, 64571, 64567, 64565, 64564, 64563, 64561, 64560, 64556, 64555, 64553, 64550, 64544, 64543, 64540, 64539, 64537, 64536, 64535, 64534, 64533, 64531, 64530, 64529, 64527, 64526, 64523, 64521, 64520, 64517, 64515, 64514, 64512, 64510, 64509, 64508, 64490, 64489, 64488, 64486, 64485, 64484, 64471, 64469, 64467, 64459, 64458, 64434, 64430, 64429, 64428, 64427, 64426, 64425, 64424, 64423, 64422, 64421, 64420, 64418, 64413, 64412, 64411, 64410, 64409, 64408, 64407, 64406, 64405, 64404, 64403, 64402, 64401, 64400, 64399, 64398, 64394, 64386, 64383, 64382, 64379, 64378, 64375, 64374, 64371, 64370, 64368, 64366, 64364, 64363, 64362, 64360, 64358, 64356, 64354, 64352, 64350, 64348, 64346, 64344, 64342, 64340, 64338, 64337, 64336, 64335, 64332, 64331, 64330, 64329, 64327, 64326, 64325, 64323, 64322, 64321, 64320, 64319, 64318, 64317, 64314, 64313, 64312, 64311, 64310, 64309, 64308, 64307, 64306, 64305, 64302, 64298, 64297, 64294, 64292, 64291, 64290, 64289, 64288, 64287, 64286, 64285, 64280, 64279, 64275, 64263, 64262, 64261, 64259, 64257, 64256, 59337, 59335, 57344, 55296, 55204, 44032, 42786, 42784, 42779, 42775, 42240, 42183, 42128, 42125, 40960, 40892, 19968, 19904, 12926, 12924, 12832, 12829, 12800, 12798, 12797, 12796, 12795, 12792, 12790, 12789, 12788, 12787, 12785, 12784, 12736, 12728, 12688, 12687, 12593, 12592, 12588, 12549, 12544, 12543, 12541, 12540, 12539, 12535, 12533, 12532, 12531, 12530, 12528, 12527, 12526, 12524, 12523, 12522, 12521, 12520, 12519, 12518, 12517, 12516, 12515, 12514, 12513, 12512, 12511, 12510, 12504, 12502, 12501, 12499, 12498, 12495, 12494, 12493, 12492, 12490, 12489, 12488, 12487, 12486, 12485, 12484, 12483, 12480, 12479, 12478, 12477, 12476, 12474, 12471, 12469, 12468, 12467, 12464, 12463, 12460, 12459, 12458, 12457, 12456, 12455, 12454, 12453, 12452, 12451, 12450, 12449, 12447, 12446, 12445, 12443, 12439, 12436, 12435, 12434, 12431, 12429, 12428, 12427, 12426, 12425, 12424, 12423, 12422, 12421, 12420, 12419, 12418, 12415, 12414, 12405, 12402, 12396, 12395, 12393, 12392, 12390, 12388, 12387, 12385, 12381, 12378, 12377, 12375, 12374, 12373, 12372, 12371, 12370, 12369, 12368, 12367, 12365, 12363, 12362, 12361, 12360, 12359, 12358, 12357, 12356, 12355, 12354, 12353, 11904, 11800, 11799, 11744, 11743, 11742, 11741, 11740, 11737, 11736, 11735, 11733, 11732, 11731, 11729, 11728, 11727, 11725, 11724, 11723, 11722, 11721, 11720, 11719, 11716, 11715, 11712, 11711, 11710, 11709, 11708, 11707, 11704, 11703, 11698, 11697, 11696, 11695, 11692, 11691, 11688, 11687, 11686, 11685, 11684, 11683, 11681, 11680, 11671, 11670, 11669, 11668, 11667, 11666, 11665, 11664, 11663, 11662, 11660, 11659, 11658, 11657, 11656, 11654, 11651, 11649, 11648, 11568, 11520, 11384, 11383, 11382, 11381, 11380, 11373, 11372, 11371, 11370, 11369, 11368, 11367, 11366, 11365, 11364, 11363, 11362, 11361, 11360, 11008, 10762, 10761, 10759, 10757, 10756, 10755, 10752, 10750, 10748, 10746, 10631, 10629, 10624, 10622, 10620, 10619, 10618, 10616, 10615, 10614, 10608, 10606, 10598, 10597, 10596, 10595, 10594, 10592, 10590, 10588, 10586, 10584, 10582, 10580, 10578, 10577, 10576, 10575, 10574, 10572, 10570, 10569, 10568, 10562, 10560, 10558, 10554, 10552, 10550, 10547, 10541, 10539, 10535, 10531, 10529, 10521, 10518, 10516, 10514, 10513, 10512, 10508, 10506, 10504, 10502, 10501, 10500, 10498, 10496, 10240, 10229, 10228, 10226, 10224, 10220, 10218, 10216, 10214, 10176, 9984, 9856, 9842, 9840, 9838, 9837, 9836, 9835, 9833, 9832, 9830, 9829, 9828, 9827, 9824, 9795, 9794, 9793, 9792, 9789, 9788, 9787, 9786, 9785, 9711, 9703, 9702, 9690, 9688, 9680, 9679, 9678, 9677, 9675, 9672, 9670, 9669, 9668, 9662, 9660, 9659, 9658, 9652, 9650, 9645, 9644, 9642, 9634, 9632, 9622, 9620, 9617, 9616, 9613, 9612, 9609, 9608, 9605, 9604, 9601, 9600, 9581, 9552, 9548, 9547, 9539, 9538, 9536, 9535, 9533, 9532, 9531, 9529, 9527, 9525, 9524, 9523, 9521, 9519, 9517, 9516, 9515, 9513, 9512, 9510, 9509, 9508, 9507, 9505, 9504, 9502, 9501, 9500, 9499, 9497, 9496, 9495, 9493, 9492, 9491, 9489, 9488, 9487, 9485, 9484, 9476, 9475, 9474, 9473, 9472, 9280, 9253, 9252, 9251, 9228, 9227, 9216, 9185, 9180, 9168, 9167, 9144, 9143, 9142, 9140, 9138, 9136, 9135, 9134, 9115, 9003, 9001, 8996, 8994, 8992, 8977, 8976, 8972, 8968, 8967, 8965, 8963, 8962, 8959, 8958, 8957, 8956, 8955, 8954, 8952, 8951, 8949, 8948, 8947, 8946, 8922, 8920, 8905, 8904, 8902, 8901, 8891, 8890, 8888, 8886, 8872, 8870, 8813, 8812, 8810, 8806, 8804, 8802, 8800, 8777, 8776, 8769, 8768, 8759, 8758, 8756, 8753, 8752, 8751, 8750, 8749, 8748, 8747, 8746, 8745, 8743, 8742, 8741, 8740, 8739, 8736, 8735, 8734, 8733, 8731, 8730, 8729, 8728, 8727, 8726, 8725, 8723, 8722, 8721, 8720, 8718, 8717, 8715, 8714, 8712, 8711, 8710, 8709, 8707, 8706, 8705, 8704, 8703, 8701, 8700, 8698, 8697, 8695, 8694, 8693, 8692, 8691, 8689, 8688, 8683, 8681, 8680, 8679, 8676, 8675, 8674, 8673, 8672, 8670, 8668, 8666, 8662, 8661, 8660, 8659, 8658, 8657, 8655, 8654, 8651, 8650, 8649, 8648, 8646, 8645, 8644, 8642, 8640, 8638, 8632, 8630, 8629, 8623, 8621, 8617, 8616, 8615, 8614, 8613, 8610, 8609, 8608, 8607, 8606, 8604, 8602, 8598, 8597, 8596, 8595, 8594, 8593, 8581, 8580, 8544, 8543, 8539, 8533, 8531, 8528, 8527, 8526, 8525, 8522, 8520, 8519, 8518, 8517, 8516, 8514, 8513, 8512, 8511, 8510, 8509, 8507, 8506, 8505, 8495, 8494, 8492, 8491, 8487, 8486, 8483, 8481, 8471, 8470, 8454, 8453, 8452, 8451, 8448, 8427, 8426, 8425, 8424, 8423, 8421, 8418, 8417, 8416, 8413, 8412, 8411, 8408, 8406, 8404, 8402, 8400, 8374, 8373, 8372, 8370, 8369, 8368, 8367, 8366, 8365, 8363, 8362, 8361, 8360, 8359, 8357, 8355, 8353, 8352, 8341, 8340, 8338, 8336, 8335, 8325, 8321, 8309, 8306, 8304, 8298, 8287, 8286, 8280, 8279, 8274, 8266, 8261, 8260, 8255, 8254, 8252, 8251, 8249, 8245, 8243, 8242, 8241, 8240, 8239, 8234, 8232, 8229, 8228, 8226, 8225, 8224, 8223, 8220, 8216, 8215, 8214, 8212, 8210, 8209, 8208, 8203, 8202, 8201, 8200, 8199, 8198, 8197, 8196, 8195, 8194, 8193, 8192, 8191, 8189, 8187, 8186, 8185, 8184, 8182, 8181, 8178, 8176, 8173, 8172, 8170, 8168, 8160, 8157, 8156, 8154, 8152, 8150, 8148, 8144, 8141, 8140, 8138, 8136, 8134, 8133, 8130, 8125, 8120, 8118, 8117, 8112, 8108, 8106, 8104, 8096, 8090, 8088, 8080, 8074, 8072, 8064, 8062, 8060, 8056, 8054, 8052, 8050, 8048, 8044, 8042, 8040, 8032, 8031, 8030, 8029, 8028, 8027, 8026, 8025, 8024, 8016, 8014, 8012, 8010, 8008, 8006, 8000, 7994, 7992, 7984, 7978, 7976, 7968, 7966, 7962, 7958, 7952, 7946, 7944, 7936, 7930, 7929, 7928, 7927, 7926, 7925, 7924, 7923, 7922, 7921, 7920, 7919, 7918, 7917, 7916, 7915, 7914, 7913, 7912, 7911, 7910, 7909, 7908, 7907, 7906, 7905, 7904, 7903, 7902, 7901, 7900, 7899, 7898, 7897, 7896, 7895, 7894, 7893, 7892, 7891, 7890, 7889, 7888, 7887, 7886, 7885, 7884, 7883, 7882, 7881, 7880, 7879, 7878, 7877, 7876, 7875, 7874, 7873, 7872, 7871, 7870, 7869, 7868, 7867, 7866, 7865, 7864, 7863, 7862, 7861, 7860, 7859, 7858, 7857, 7856, 7855, 7854, 7853, 7852, 7851, 7850, 7849, 7848, 7847, 7846, 7845, 7844, 7843, 7842, 7841, 7840, 7836, 7835, 7833, 7832, 7831, 7830, 7829, 7828, 7827, 7826, 7825, 7824, 7823, 7822, 7821, 7820, 7819, 7817, 7816, 7815, 7814, 7813, 7812, 7811, 7810, 7809, 7808, 7807, 7806, 7805, 7804, 7803, 7802, 7801, 7800, 7799, 7798, 7797, 7796, 7795, 7794, 7793, 7792, 7791, 7790, 7789, 7788, 7787, 7786, 7785, 7784, 7783, 7782, 7781, 7780, 7779, 7778, 7777, 7776, 7775, 7774, 7773, 7772, 7771, 7770, 7769, 7768, 7767, 7766, 7765, 7764, 7763, 7762, 7761, 7760, 7759, 7758, 7757, 7756, 7755, 7754, 7753, 7752, 7751, 7750, 7749, 7748, 7747, 7746, 7745, 7744, 7743, 7742, 7741, 7740, 7739, 7738, 7737, 7736, 7735, 7734, 7733, 7732, 7731, 7730, 7729, 7728, 7727, 7726, 7725, 7724, 7723, 7722, 7721, 7720, 7719, 7718, 7717, 7716, 7715, 7714, 7713, 7712, 7711, 7710, 7709, 7708, 7707, 7706, 7705, 7704, 7703, 7702, 7701, 7700, 7699, 7698, 7697, 7696, 7695, 7694, 7693, 7692, 7691, 7690, 7689, 7688, 7687, 7686, 7685, 7684, 7683, 7682, 7681, 7680, 7678, 7627, 7616, 7614, 7613, 7611, 7606, 7603, 7598, 7597, 7596, 7595, 7588, 7587, 7586, 7584, 7583, 7582, 7580, 7579, 7578, 7577, 7575, 7574, 7570, 7568, 7566, 7564, 7563, 7562, 7561, 7559, 7558, 7557, 7556, 7555, 7554, 7552, 7550, 7549, 7547, 7546, 7545, 7544, 7543, 7542, 7541, 7540, 7538, 7536, 7535, 7534, 7532, 7531, 7528, 7527, 7524, 7523, 7522, 7520, 7518, 7515, 7514, 7512, 7511, 7508, 7507, 7505, 7504, 7503, 7502, 7501, 7497, 7495, 7494, 7493, 7491, 7490, 7489, 7488, 7487, 7485, 7482, 7481, 7480, 7479, 7478, 7477, 7475, 7473, 7472, 7470, 7469, 7468, 7466, 7465, 7464, 7463, 7462, 7461, 7458, 7457, 7456, 7455, 7454, 7453, 7452, 7448, 7446, 7445, 7444, 7441, 7439, 7438, 7437, 7436, 7435, 7434, 7433, 7432, 7431, 7428, 7427, 7426, 7425, 7424, 6656, 6654, 6653, 6652, 6650, 6648, 6647, 6644, 6643, 6642, 6640, 6638, 6637, 6636, 6635, 6634, 6632, 6631, 6628, 6627, 6626, 6625, 6624, 6320, 6313, 6312, 6311, 6310, 6306, 6305, 6304, 6303, 6302, 6301, 6300, 6299, 6298, 6297, 6294, 6293, 6290, 6289, 6287, 6286, 6285, 6284, 6283, 6282, 6281, 6280, 6279, 6278, 6277, 6275, 6274, 6273, 6272, 6264, 6263, 6262, 6261, 6260, 6259, 6257, 6256, 6254, 6252, 6251, 6250, 6249, 6248, 6246, 6245, 6244, 6243, 6242, 6241, 6240, 6239, 6238, 6237, 6235, 6234, 6233, 6231, 6230, 6229, 6226, 6224, 6223, 6221, 6220, 6219, 6218, 6214, 6213, 6212, 6211, 6210, 6209, 6208, 6207, 6206, 6204, 6202, 6200, 6197, 6195, 6194, 6192, 6190, 6188, 6186, 6185, 6184, 6183, 6181, 6179, 6178, 6177, 6176, 6170, 6169, 6167, 6166, 6165, 6164, 6162, 6160, 6159, 6155, 6154, 6153, 6152, 6150, 6148, 6147, 6146, 6145, 6144, 6137, 6136, 6135, 6133, 6132, 6131, 6130, 6129, 6128, 6122, 6121, 6120, 6119, 6117, 6116, 6115, 6114, 6112, 6110, 6109, 6107, 6106, 6105, 6104, 6103, 6102, 6101, 6100, 6099, 6089, 6088, 6087, 6086, 6084, 6081, 6079, 6078, 6071, 6070, 6068, 6067, 6066, 6058, 6057, 6055, 6054, 6053, 6052, 6050, 6049, 6047, 6045, 6044, 6043, 6042, 6041, 6031, 6030, 6029, 6026, 6025, 6024, 6020, 6019, 6016, 5760, 5751, 5749, 5747, 5745, 5744, 5743, 5742, 5737, 5735, 5731, 5729, 5725, 5723, 5722, 5718, 5716, 5712, 5710, 5706, 5704, 5702, 5698, 5696, 5692, 5690, 5686, 5684, 5680, 5678, 5674, 5672, 5668, 5662, 5660, 5655, 5652, 5648, 5646, 5642, 5640, 5636, 5634, 5633, 5629, 5627, 5623, 5621, 5617, 5615, 5614, 5610, 5608, 5604, 5602, 5598, 5596, 5592, 5590, 5586, 5584, 5580, 5578, 5574, 5572, 5560, 5556, 5552, 5551, 5550, 5543, 5542, 5536, 5535, 5531, 5527, 5526, 5525, 5523, 5521, 5518, 5514, 5510, 5509, 5502, 5501, 5500, 5499, 5495, 5492, 5490, 5488, 5487, 5485, 5483, 5482, 5480, 5476, 5470, 5469, 5467, 5463, 5459, 5458, 5457, 5456, 5454, 5448, 5442, 5440, 5439, 5438, 5432, 5431, 5430, 5429, 5423, 5414, 5413, 5405, 5399, 5395, 5392, 5390, 5389, 5388, 5385, 5384, 5383, 5382, 5381, 5380, 5379, 5378, 5375, 5374, 5373, 5372, 5371, 5370, 5369, 5367, 5366, 5357, 5356, 5355, 5354, 5353, 5352, 5351, 5349, 5348, 5347, 5346, 5345, 5344, 5343, 5340, 5331, 5330, 5329, 5328, 5326, 5325, 5324, 5321, 5312, 5311, 5310, 5309, 5308, 5307, 5306, 5305, 5304, 5303, 5301, 5300, 5299, 5297, 5296, 5295, 5294, 5293, 5292, 5283, 5281, 5266, 5257, 5254, 5253, 5251, 5242, 5241, 5240, 5239, 5236, 5227, 5225, 5223, 5222, 5213, 5212, 5211, 5210, 5208, 5207, 5200, 5196, 5195, 5194, 5193, 5192, 5191, 5190, 5189, 5187, 5186, 5185, 5184, 5182, 5181, 5178, 5171, 5167, 5166, 5165, 5164, 5163, 5162, 5161, 5160, 5159, 5158, 5156, 5155, 5153, 5151, 5150, 5149, 5148, 5147, 5146, 5145, 5144, 5143, 5142, 5141, 5140, 5139, 5138, 5132, 5125, 5121, 5120, 5109, 5108, 5107, 5106, 5105, 5104, 5103, 5101, 5100, 5099, 5098, 5096, 5095, 5093, 5092, 5091, 5090, 5089, 5087, 5085, 5084, 5083, 5082, 5080, 5079, 5078, 5077, 5076, 5075, 5073, 5072, 5071, 5070, 5069, 5068, 5067, 5066, 5065, 5064, 5063, 5062, 5061, 5060, 5059, 5058, 5057, 5056, 5055, 5054, 5053, 5052, 5051, 5050, 5049, 5048, 5047, 5046, 5045, 5044, 5043, 5042, 5041, 5040, 5039, 5038, 5037, 5036, 5035, 5034, 5032, 5031, 5030, 5029, 5028, 5027, 5026, 5025, 5024, 5018, 5017, 5015, 5014, 5013, 5012, 5010, 5009, 5008, 5007, 5006, 5005, 5000, 4999, 4998, 4996, 4995, 4994, 4993, 4992, 4989, 4988, 4986, 4985, 4983, 4982, 4979, 4977, 4976, 4975, 4974, 4971, 4969, 4968, 4967, 4966, 4963, 4962, 4961, 4960, 4955, 4954, 4953, 4951, 4950, 4948, 4947, 4941, 4940, 4939, 4938, 4937, 4935, 4934, 4933, 4932, 4931, 4930, 4929, 4928, 4927, 4926, 4924, 4923, 4921, 4920, 4919, 4918, 4916, 4915, 4913, 4912, 4911, 4910, 4909, 4908, 4907, 4906, 4905, 4904, 4903, 4902, 4901, 4900, 4899, 4897, 4896, 4895, 4894, 4890, 4889, 4888, 4886, 4885, 4884, 4883, 4882, 4881, 4880, 4878, 4877, 4876, 4873, 4872, 4871, 4870, 4868, 4867, 4865, 4864, 4863, 4862, 4861, 4860, 4859, 4857, 4856, 4855, 4854, 4853, 4852, 4851, 4850, 4849, 4848, 4847, 4846, 4845, 4844, 4843, 4842, 4841, 4840, 4832, 4831, 4830, 4829, 4828, 4827, 4826, 4825, 4824, 4823, 4822, 4821, 4820, 4819, 4817, 4816, 4815, 4814, 4813, 4810, 4809, 4808, 4806, 4804, 4803, 4802, 4801, 4800, 4799, 4797, 4796, 4795, 4793, 4792, 4790, 4789, 4787, 4786, 4785, 4784, 4783, 4781, 4780, 4779, 4778, 4777, 4776, 4775, 4773, 4772, 4771, 4769, 4768, 4767, 4766, 4765, 4764, 4763, 4762, 4761, 4760, 4759, 4758, 4757, 4756, 4755, 4754, 4753, 4752, 4750, 4749, 4748, 4747, 4746, 4745, 4742, 4741, 4740, 4739, 4738, 4737, 4736, 4732, 4731, 4724, 4723, 4720, 4719, 4718, 4716, 4715, 4713, 4712, 4711, 4710, 4708, 4707, 4705, 4704, 4702, 4701, 4699, 4698, 4697, 4696, 4695, 4692, 4691, 4688, 4686, 4685, 4683, 4682, 4681, 4680, 4676, 4675, 4672, 4671, 4669, 4668, 4667, 4665, 4664, 4663, 4661, 4660, 4659, 4657, 4656, 4655, 4654, 4653, 4651, 4650, 4649, 4648, 4647, 4646, 4645, 4644, 4643, 4642, 4641, 4640, 4639, 4637, 4636, 4635, 4634, 4633, 4632, 4631, 4629, 4628, 4627, 4625, 4624, 4623, 4622, 4621, 4620, 4619, 4617, 4616, 4615, 4614, 4610, 4609, 4608, 4352, 4349, 4348, 4347, 4346, 4343, 4342, 4341, 4339, 4338, 4337, 4336, 4335, 4334, 4333, 4331, 4330, 4327, 4326, 4325, 4324, 4322, 4321, 4320, 4318, 4317, 4315, 4314, 4313, 4312, 4311, 4310, 4308, 4307, 4305, 4304, 4256, 4096, 4048, 4047, 4045, 4041, 4040, 4039, 4038, 4037, 4036, 4035, 4034, 4033, 4032, 4030, 4029, 3993, 3992, 3984, 3980, 3974, 3973, 3968, 3967, 3953, 3947, 3936, 3935, 3913, 3912, 3904, 3902, 3900, 3898, 3895, 3894, 3893, 3892, 3886, 3885, 3882, 3880, 3878, 3877, 3876, 3874, 3873, 3872, 3870, 3869, 3867, 3866, 3865, 3864, 3862, 3861, 3860, 3859, 3858, 3857, 3855, 3854, 3853, 3851, 3850, 3849, 3848, 3847, 3846, 3845, 3844, 3842, 3840, 3806, 3804, 3802, 3801, 3799, 3798, 3796, 3795, 3794, 3792, 3790, 3784, 3783, 3782, 3781, 3780, 3779, 3778, 3777, 3776, 3774, 3773, 3771, 3770, 3764, 3763, 3762, 3761, 3760, 3759, 3758, 3757, 3756, 3755, 3754, 3752, 3751, 3750, 3749, 3748, 3747, 3746, 3745, 3744, 3740, 3737, 3736, 3734, 3733, 3732, 3726, 3725, 3723, 3722, 3721, 3720, 3719, 3717, 3716, 3715, 3714, 3713, 3712, 3675, 3673, 3671, 3670, 3668, 3666, 3655, 3652, 3651, 3650, 3649, 3648, 3647, 3643, 3636, 3635, 3634, 3633, 3632, 3631, 3629, 3628, 3626, 3625, 3624, 3623, 3621, 3620, 3619, 3618, 3616, 3614, 3609, 3608, 3607, 3606, 3604, 3602, 3601, 3600, 3598, 3597, 3596, 3595, 3593, 3592, 3591, 3590, 3586, 3585, 3584, 3573, 3572, 3571, 3570, 3552, 3551, 3550, 3549, 3548, 3547, 3545, 3544, 3543, 3542, 3541, 3538, 3535, 3531, 3530, 3527, 3523, 3520, 3518, 3517, 3516, 3515, 3514, 3512, 3510, 3508, 3507, 3506, 3505, 3504, 3503, 3502, 3500, 3499, 3496, 3495, 3494, 3493, 3492, 3491, 3488, 3487, 3485, 3484, 3483, 3482, 3479, 3478, 3476, 3475, 3474, 3473, 3472, 3471, 3470, 3469, 3468, 3467, 3466, 3465, 3462, 3461, 3460, 3458, 3456, 3440, 3439, 3438, 3437, 3436, 3434, 3433, 3432, 3431, 3430, 3426, 3425, 3424, 3416, 3415, 3406, 3405, 3404, 3403, 3402, 3401, 3400, 3399, 3398, 3396, 3394, 3393, 3392, 3391, 3390, 3386, 3385, 3384, 3383, 3382, 3381, 3379, 3378, 3377, 3376, 3375, 3373, 3372, 3370, 3369, 3367, 3366, 3365, 3364, 3362, 3361, 3360, 3359, 3358, 3357, 3356, 3355, 3354, 3353, 3352, 3351, 3350, 3349, 3348, 3347, 3346, 3345, 3344, 3342, 3341, 3340, 3339, 3338, 3337, 3336, 3335, 3334, 3333, 3332, 3331, 3330, 3312, 3302, 3298, 3297, 3296, 3295, 3294, 3287, 3285, 3278, 3277, 3276, 3275, 3274, 3273, 3271, 3270, 3269, 3268, 3267, 3266, 3265, 3264, 3263, 3262, 3261, 3260, 3258, 3255, 3254, 3253, 3252, 3249, 3248, 3247, 3246, 3242, 3241, 3233, 3232, 3231, 3230, 3229, 3225, 3224, 3223, 3222, 3221, 3218, 3217, 3214, 3213, 3212, 3211, 3210, 3209, 3208, 3205, 3204, 3203, 3202, 3184, 3183, 3182, 3181, 3180, 3179, 3178, 3177, 3176, 3174, 3170, 3169, 3168, 3159, 3157, 3150, 3149, 3148, 3146, 3145, 3142, 3141, 3140, 3139, 3138, 3137, 3135, 3134, 3130, 3129, 3127, 3126, 3125, 3124, 3123, 3122, 3121, 3120, 3119, 3118, 3114, 3113, 3105, 3104, 3103, 3102, 3101, 3097, 3096, 3095, 3094, 3093, 3092, 3090, 3089, 3088, 3086, 3085, 3084, 3083, 3082, 3081, 3080, 3079, 3078, 3077, 3076, 3075, 3074, 3073, 3067, 3066, 3065, 3064, 3063, 3062, 3061, 3060, 3059, 3058, 3057, 3056, 3055, 3054, 3053, 3052, 3051, 3050, 3048, 3047, 3046, 3032, 3031, 3022, 3021, 3020, 3018, 3017, 3016, 3014, 3011, 3010, 3009, 3008, 3007, 3006, 3002, 3001, 3000, 2999, 2998, 2997, 2996, 2995, 2994, 2993, 2992, 2991, 2990, 2987, 2986, 2985, 2984, 2981, 2980, 2979, 2976, 2975, 2974, 2973, 2972, 2971, 2970, 2969, 2966, 2965, 2964, 2962, 2961, 2960, 2958, 2955, 2954, 2953, 2952, 2951, 2950, 2949, 2948, 2947, 2946, 2930, 2929, 2928, 2918, 2914, 2913, 2912, 2911, 2910, 2908, 2904, 2903, 2902, 2894, 2893, 2891, 2889, 2887, 2884, 2881, 2880, 2879, 2878, 2877, 2876, 2874, 2873, 2869, 2868, 2867, 2866, 2865, 2864, 2863, 2862, 2861, 2860, 2859, 2858, 2857, 2844, 2843, 2842, 2841, 2840, 2838, 2837, 2836, 2835, 2833, 2832, 2831, 2829, 2828, 2827, 2824, 2823, 2822, 2821, 2820, 2818, 2817, 2802, 2801, 2800, 2790, 2788, 2786, 2784, 2769, 2768, 2766, 2765, 2763, 2762, 2761, 2759, 2758, 2753, 2752, 2751, 2750, 2749, 2748, 2746, 2745, 2741, 2740, 2738, 2737, 2736, 2734, 2732, 2731, 2730, 2729, 2727, 2726, 2724, 2723, 2722, 2719, 2717, 2715, 2714, 2713, 2712, 2710, 2709, 2707, 2706, 2705, 2703, 2702, 2701, 2699, 2698, 2697, 2696, 2695, 2694, 2693, 2692, 2691, 2689, 2677, 2676, 2675, 2674, 2672, 2662, 2655, 2654, 2653, 2651, 2650, 2649, 2638, 2635, 2633, 2631, 2627, 2625, 2622, 2621, 2620, 2618, 2616, 2615, 2613, 2612, 2610, 2609, 2608, 2607, 2605, 2604, 2602, 2601, 2600, 2599, 2596, 2595, 2586, 2585, 2584, 2583, 2582, 2581, 2580, 2579, 2577, 2576, 2575, 2571, 2569, 2567, 2566, 2565, 2564, 2563, 2561, 2560, 2555, 2554, 2553, 2552, 2551, 2550, 2549, 2548, 2547, 2546, 2544, 2543, 2542, 2541, 2540, 2539, 2538, 2537, 2536, 2534, 2532, 2528, 2527, 2526, 2525, 2520, 2519, 2511, 2510, 2509, 2507, 2505, 2504, 2503, 2501, 2497, 2494, 2493, 2492, 2490, 2489, 2486, 2483, 2482, 2481, 2478, 2477, 2476, 2475, 2474, 2473, 2471, 2470, 2469, 2468, 2467, 2466, 2465, 2464, 2463, 2462, 2460, 2459, 2458, 2457, 2454, 2453, 2452, 2451, 2449, 2448, 2447, 2445, 2443, 2442, 2441, 2440, 2439, 2438, 2437, 2436, 2434, 2433, 2432, 2431, 2429, 2428, 2427, 2417, 2416, 2406, 2405, 2404, 2402, 2401, 2400, 2399, 2398, 2396, 2395, 2394, 2392, 2389, 2385, 2384, 2382, 2381, 2377, 2369, 2368, 2367, 2366, 2365, 2364, 2362, 2361, 2360, 2359, 2358, 2357, 2355, 2354, 2352, 2351, 2349, 2348, 2347, 2346, 2343, 2342, 2340, 2339, 2337, 2336, 2335, 2334, 2331, 2330, 2329, 2327, 2325, 2321, 2317, 2316, 2315, 2314, 2311, 2310, 2308, 2307, 2305, 2304, 2224, 2223, 2222, 2120, 2119, 2017, 2016, 1984, 1970, 1969, 1958, 1957, 1952, 1949, 1948, 1947, 1943, 1942, 1941, 1940, 1939, 1938, 1937, 1936, 1935, 1932, 1931, 1929, 1928, 1926, 1925, 1923, 1921, 1920, 1902, 1901, 1895, 1893, 1888, 1885, 1884, 1883, 1881, 1879, 1872, 1871, 1870, 1840, 1839, 1838, 1837, 1836, 1835, 1834, 1833, 1832, 1830, 1829, 1827, 1826, 1825, 1824, 1822, 1821, 1819, 1818, 1817, 1816, 1815, 1813, 1811, 1810, 1809, 1808, 1807, 1806, 1804, 1803, 1802, 1797, 1793, 1792, 1791, 1790, 1789, 1788, 1787, 1786, 1775, 1774, 1767, 1765, 1759, 1758, 1757, 1750, 1749, 1748, 1746, 1744, 1743, 1740, 1732, 1728, 1727, 1726, 1717, 1711, 1708, 1707, 1706, 1705, 1703, 1697, 1695, 1693, 1690, 1681, 1672, 1665, 1657, 1656, 1654, 1653, 1652, 1649, 1648, 1647, 1646, 1645, 1643, 1632, 1631, 1609, 1608, 1607, 1606, 1605, 1604, 1603, 1602, 1601, 1600, 1595, 1591, 1589, 1587, 1585, 1583, 1580, 1578, 1577, 1576, 1575, 1574, 1573, 1572, 1570, 1569, 1568, 1567, 1566, 1564, 1563, 1558, 1557, 1552, 1551, 1550, 1549, 1548, 1547, 1540, 1539, 1538, 1537, 1525, 1524, 1523, 1520, 1516, 1515, 1514, 1513, 1511, 1510, 1509, 1506, 1505, 1504, 1503, 1501, 1498, 1497, 1495, 1494, 1493, 1492, 1491, 1490, 1489, 1488, 1480, 1479, 1478, 1476, 1475, 1473, 1472, 1471, 1470, 1467, 1465, 1425, 1424, 1419, 1418, 1417, 1416, 1415, 1414, 1412, 1411, 1410, 1408, 1407, 1405, 1404, 1403, 1402, 1401, 1400, 1399, 1398, 1397, 1393, 1390, 1389, 1388, 1387, 1386, 1385, 1382, 1380, 1378, 1377, 1376, 1374, 1373, 1372, 1371, 1369, 1367, 1366, 1365, 1362, 1361, 1360, 1359, 1357, 1356, 1355, 1354, 1353, 1352, 1351, 1350, 1349, 1348, 1347, 1346, 1345, 1344, 1343, 1341, 1340, 1339, 1338, 1337, 1336, 1334, 1333, 1331, 1330, 1329, 1328, 1300, 1299, 1298, 1297, 1296, 1295, 1294, 1293, 1292, 1291, 1290, 1289, 1288, 1287, 1286, 1285, 1284, 1283, 1282, 1281, 1280, 1279, 1278, 1277, 1276, 1275, 1274, 1273, 1272, 1271, 1270, 1269, 1268, 1267, 1266, 1265, 1264, 1263, 1262, 1261, 1260, 1259, 1258, 1257, 1256, 1255, 1254, 1253, 1252, 1251, 1250, 1249, 1248, 1247, 1246, 1245, 1244, 1243, 1242, 1241, 1240, 1239, 1238, 1237, 1236, 1235, 1234, 1233, 1232, 1231, 1230, 1229, 1228, 1227, 1226, 1225, 1224, 1223, 1222, 1221, 1220, 1218, 1217, 1216, 1215, 1214, 1213, 1212, 1211, 1210, 1209, 1208, 1207, 1205, 1204, 1203, 1202, 1201, 1200, 1199, 1198, 1197, 1196, 1195, 1194, 1193, 1192, 1191, 1190, 1189, 1188, 1187, 1186, 1185, 1184, 1183, 1182, 1181, 1180, 1179, 1178, 1177, 1176, 1175, 1174, 1173, 1172, 1171, 1170, 1169, 1168, 1167, 1166, 1165, 1163, 1162, 1160, 1159, 1155, 1154, 1153, 1152, 1151, 1150, 1149, 1148, 1147, 1146, 1145, 1144, 1143, 1142, 1141, 1140, 1139, 1138, 1137, 1136, 1135, 1134, 1133, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124, 1123, 1122, 1121, 1120, 1119, 1118, 1117, 1115, 1113, 1112, 1110, 1109, 1108, 1107, 1103, 1102, 1100, 1099, 1098, 1096, 1095, 1094, 1093, 1092, 1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1080, 1079, 1078, 1077, 1076, 1075, 1073, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1064, 1063, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1054, 1053, 1052, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041, 1036, 1035, 1033, 1032, 1030, 1029, 1028, 1027, 1026, 1024, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1013, 1012, 1011, 1010, 1009, 1008, 1007, 1005, 1004, 1003, 1002, 1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984, 983, 982, 981, 980, 979, 978, 976, 975, 974, 971, 970, 969, 968, 967, 966, 965, 964, 963, 962, 959, 957, 956, 954, 953, 951, 949, 948, 947, 944, 943, 942, 941, 940, 939, 938, 936, 933, 931, 930, 929, 928, 927, 926, 925, 924, 922, 921, 920, 919, 917, 916, 915, 914, 913, 912, 911, 910, 907, 906, 905, 904, 903, 902, 900, 895, 894, 891, 890, 886, 884, 880, 867, 768, 767, 765, 761, 760, 751, 750, 746, 741, 740, 739, 737, 736, 735, 729, 728, 722, 721, 720, 718, 717, 716, 713, 710, 706, 704, 699, 698, 697, 696, 695, 694, 691, 690, 688, 686, 684, 682, 681, 680, 679, 678, 676, 675, 673, 672, 671, 670, 669, 668, 666, 665, 664, 658, 657, 656, 654, 653, 651, 650, 649, 647, 646, 645, 643, 642, 640, 633, 632, 631, 630, 626, 623, 622, 616, 613, 612, 611, 610, 608, 607, 606, 605, 603, 602, 600, 598, 596, 593, 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 580, 579, 578, 577, 576, 575, 573, 572, 571, 568, 567, 566, 565, 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 550, 549, 548, 547, 546, 545, 544, 543, 542, 541, 540, 539, 538, 537, 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 516, 515, 514, 513, 512, 511, 510, 509, 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447, 445, 443, 441, 439, 438, 437, 436, 435, 433, 432, 431, 430, 429, 428, 427, 426, 425, 424, 422, 421, 420, 419, 418, 417, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 403, 402, 401, 400, 399, 398, 396, 395, 394, 393, 392, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 373, 372, 371, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 249, 248, 247, 242, 241, 240, 236, 231, 230, 224, 223, 222, 217, 216, 215, 209, 208, 204, 200, 199, 198, 192, 191, 188, 187, 185, 184, 183, 181, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 162, 161, 160, 128, 127, 126, 125, 124, 123, 122, 120, 119, 117, 116, 115, 114, 111, 110, 109, 108, 107, 106, 105, 103, 102, 101, 100, 99, 98, 97, 96, 94, 93, 92, 91, 90, 88, 87, 85, 83, 82, 81, 80, 78, 77, 76, 75, 74, 73, 71, 69, 67, 66, 65, 64, 63, 60, 59, 58, 48, 46, 45, 44, 43, 42, 40, 39, 38, 37, 35, 33, 32, 14, 9, 1 };
            int[] charlength = new int[] { 12, 16, 12, 8, 12, 16, 12, 8, 10, 8, 10, 8, 10, 8, 10, 8, 4, 9, 11, 8, 9, 8, 10, 11, 10, 8, 11, 7, 10, 9, 8, 10, 8, 10, 9, 10, 7, 10, 9, 10, 9, 11, 9, 10, 9, 10, 9, 10, 9, 10, 8, 7, 8, 7, 8, 9, 7, 16, 0, 8, 10, 9, 10, 9, 10, 9, 10, 9, 4, 9, 10, 9, 10, 7, 6, 241, 6, 5, 4, 8, 6, 5, 3, 8, 6, 10, 4, 9, 4, 13, 6, 8, 7, 9, 6, 8, 7, 9, 14, 18, 14, 18, 9, 13, 9, 13, 8, 5, 8, 9, 8, 9, 8, 9, 4, 11, 4, 11, 6, 5, 4, 11, 4, 3, 4, 9, 10, 4, 3, 7, 1238, 3, 4, 3, 7, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 8, 3, 8, 4, 10, 3, 10, 16, 10, 16, 10, 16, 12, 0, 16, 12, 5, 0, 20, 5, 1218, 5, 13, 5, 12, 5, 7, 5, 7, 5, 8, 5, 8, 5, 8, 1240, 6, 5, 7, 5, 3, 4, 8, 5, 8, 9, 13, 12, 5, 14, 5, 13, 5, 1233, 13, 11, 10, 9, 13, 5, 12, 5, 10, 5, 4, 5, 4, 5, 7, 8, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 5, 6, 5, 3, 6, 4, 6, 4, 3, 6, 5, 4, 6, 4, 6, 7, 6, 7, 6, 5, 9, 11, 9, 11, 8, 9, 7, 8, 7, 8, 7, 8, 3, 5, 3, 6, 5, 3, 6, 1226, 6, 5, 3, 6, 9, 6, 7, 5, 9, 6, 7, 5, 4, 9, 6, 10, 8, 12, 7, 5, 9, 6, 7, 9, 6, 7, 9, 6, 7, 9, 6, 7, 5, 0, 8, 5, 8, 6, 7, 10, 7, 8, 6, 7, 9, 5, 8, 4, 8, 7, 8, 5, 10, 5, 8, 4, 7, 8, 4, 7, 1231, 7, 5, 11, 10, 9, 8, 9, 8, 9, 8, 9, 8, 6, 7, 8, 6, 7, 8, 6, 7, 8, 6, 7, 4, 9, 10, 12, 3, 1, 4, 9, 10, 7, 6, 10, 12, 1232, 12, 13, 6, 7, 6, 7, 5, 4, 6, 5, 6, 5, 4, 8, 6, 15, 13, 8, 6, 15, 13, 8, 6, 15, 13, 8, 6, 15, 13, 8, 5, 8, 9, 8, 9, 8, 9, 8, 9, 4, 13, 4, 1240, 13, 4, 11, 4, 11, 4, 11, 4, 11, 4, 11, 4, 11, 4, 3, 8, 7, 4, 8, 10, 8, 7, 12, 7, 12, 8, 5, 12, 8, 12, 7, 4, 8, 12, 5, 4, 8, 7, 5, 7, 8, 10, 9, 10, 9, 10, 9, 10, 7, 9, 10, 4, 12, 21, 17, 12, 11, 10, 14, 7, 10, 16, 8, 16, 12, 8, 16, 12, 7, 12, 7, 12, 6, 11, 6, 11, 10, 16, 12, 16, 8, 16, 8, 16, 12, 13, 10, 11, 13, 11, 14, 11, 9, 12, 11, 16, 10, 16, 8, 16, 8, 10, 16, 10, 16, 12, 15, 8, 15, 12, 15, 14, 13, 16, 15, 12, 14, 16, 12, 13, 12, 10, 15, 13, 16, 13, 14, 12, 16, 11, 14, 15, 14, 13, 14, 12, 16, 11, 15, 13, 15, 11, 10, 15, 14, 15, 14, 12, 15, 12, 14, 13, 16, 15, 14, 16, 14, 13, 15, 13, 15, 13, 15, 13, 14, 12, 15, 12, 13, 10, 14, 12, 16, 11, 12, 8, 16, 13, 15, 14, 16, 14, 16, 14, 12, 13, 14, 12, 16, 14, 16, 14, 13, 16, 14, 16, 15, 16, 15, 14, 12, 14, 15, 13, 14, 15, 16, 15, 12, 14, 12, 14, 13, 16, 15, 13, 9, 14, 16, 15, 13, 14, 12, 11, 10, 15, 13, 15, 12, 16, 12, 5, 12, 0, 7, 9, 8, 9, 6, 0, 11, 13, 11, 14, 11, 0, 9, 11, 9, 12, 11, 9, 0, 9, 11, 9, 0, 19, 18, 21, 18, 19, 0, 13, 14, 13, 0, 10, 11, 10, 0, 11, 10, 13, 11, 13, 11, 0, 11, 9, 12, 11, 12, 9, 18, 14, 11, 12, 10, 9, 10, 9, 10, 11, 12, 14, 12, 8, 12, 9, 8, 11, 8, 12, 7, 10, 8, 12, 8, 11, 4, 7, 11, 9, 10, 4, 10, 12, 11, 13, 16, 12, 11, 12, 14, 11, 7, 8, 16, 8, 16, 10, 9, 12, 15, 12, 17, 12, 13, 11, 13, 11, 13, 11, 13, 7, 14, 7, 14, 7, 14, 7, 14, 7, 13, 7, 13, 8, 13, 8, 15, 13, 12, 10, 13, 7, 9, 14, 12, 11, 12, 10, 12, 14, 17, 14, 7, 13, 17, 14, 11, 8, 14, 15, 17, 14, 15, 12, 19, 20, 15, 16, 11, 9, 6, 7, 11, 16, 12, 16, 11, 8, 16, 8, 12, 8, 16, 8, 10, 8, 11, 8, 16, 12, 16, 12, 16, 15, 17, 16, 8, 16, 8, 6, 8, 10, 8, 9, 16, 8, 10, 8, 16, 8, 16, 8, 16, 8, 16, 8, 16, 8, 16, 6, 8, 9, 16, 8, 12, 11, 8, 11, 8, 11, 8, 11, 8, 11, 8, 11, 8, 16, 8, 16, 8, 16, 8, 11, 16, 8, 16, 8, 11, 16, 8, 16, 8, 11, 16, 8, 16, 8, 16, 11, 16, 8, 16, 8, 16, 11, 16, 8, 11, 16, 8, 11, 16, 8, 11, 16, 8, 11, 8, 16, 11, 16, 11, 16, 12, 16, 5, 16, 14, 16, 11, 10, 16, 12, 16, 10, 12, 10, 24, 12, 8, 20, 16, 12, 6, 12, 13, 10, 16, 9, 12, 8, 16, 8, 12, 10, 12, 9, 10, 9, 10, 12, 10, 9, 10, 9, 10, 12, 13, 23, 13, 16, 13, 7, 13, 10, 13, 15, 13, 9, 13, 9, 18, 13, 9, 13, 9, 13, 9, 13, 8, 13, 7, 13, 10, 19, 14, 10, 18, 14, 4, 13, 11, 13, 11, 9, 8, 6, 13, 16, 11, 15, 13, 9, 4, 9, 13, 8, 3, 13, 9, 11, 15, 13, 11, 13, 11, 13, 14, 9, 16, 11, 8, 11, 14, 17, 14, 16, 14, 15, 13, 14, 13, 15, 10, 12, 14, 10, 12, 15, 12, 15, 8, 15, 8, 15, 8, 19, 15, 13, 12, 19, 12, 15, 12, 15, 19, 15, 12, 15, 12, 15, 12, 15, 7, 15, 7, 15, 16, 15, 11, 19, 15, 7, 8, 15, 8, 15, 8, 15, 8, 15, 13, 15, 12, 7, 16, 7, 16, 7, 16, 7, 16, 8, 12, 8, 12, 16, 11, 7, 14, 11, 7, 10, 11, 13, 9, 8, 10, 12, 13, 9, 10, 11, 15, 6, 8, 10, 8, 16, 8, 12, 8, 16, 8, 16, 8, 13, 8, 16, 8, 11, 13, 10, 8, 11, 7, 11, 10, 11, 7, 12, 8, 7, 6, 9, 10, 6, 12, 11, 9, 12, 9, 8, 16, 10, 12, 8, 12, 14, 18, 15, 12, 8, 11, 10, 12, 4, 5, 4, 16, 8, 16, 8, 16, 8, 0, 12, 4, 12, 13, 12, 16, 8, 3, 8, 5, 8, 16, 5, 8, 7, 3, 8, 16, 3, 0, 7, 16, 5, 6, 7, 8, 7, 6, 5, 8, 5, 16, 8, 9, 16, 0, 1, 3, 4, 8, 3, 4, 5, 16, 8, 16, 8, 12, 5, 12, 14, 12, 14, 11, 12, 11, 12, 5, 11, 14, 11, 8, 5, 12, 8, 5, 4, 12, 4, 5, 11, 14, 12, 8, 12, 8, 5, 11, 8, 12, 8, 15, 16, 13, 11, 16, 14, 8, 13, 11, 8, 12, 11, 8, 4, 8, 7, 8, 15, 16, 13, 11, 16, 12, 16, 12, 16, 12, 14, 12, 8, 12, 14, 16, 13, 12, 8, 10, 8, 4, 16, 14, 8, 12, 14, 12, 7, 13, 11, 8, 12, 7, 11, 7, 11, 7, 11, 7, 11, 9, 12, 9, 12, 9, 12, 9, 12, 9, 12, 7, 11, 7, 11, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 3, 5, 3, 5, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 12, 4, 7, 11, 4, 7, 6, 9, 6, 9, 6, 9, 7, 11, 7, 11, 7, 11, 15, 11, 15, 11, 15, 11, 15, 11, 15, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 4, 9, 4, 9, 4, 9, 4, 9, 6, 9, 6, 9, 6, 9, 6, 9, 6, 9, 5, 10, 5, 10, 5, 10, 5, 10, 8, 9, 8, 9, 8, 12, 8, 12, 8, 12, 8, 12, 7, 12, 7, 12, 7, 12, 7, 12, 11, 14, 11, 14, 11, 14, 3, 9, 3, 9, 3, 9, 3, 9, 8, 12, 8, 12, 8, 12, 3, 5, 3, 5, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 4, 9, 7, 10, 7, 9, 7, 9, 7, 9, 7, 9, 8, 11, 8, 11, 8, 11, 8, 11, 8, 11, 7, 11, 8, 10, 8, 10, 8, 10, 7, 11, 0, 12, 0, 4, 5, 4, 5, 3, 5, 8, 7, 4, 3, 5, 4, 3, 4, 5, 4, 5, 7, 8, 7, 4, 7, 8, 7, 8, 7, 6, 5, 8, 12, 4, 8, 10, 5, 8, 9, 8, 4, 12, 8, 5, 8, 7, 4, 6, 5, 8, 12, 5, 8, 12, 5, 4, 5, 4, 3, 5, 4, 5, 8, 5, 3, 5, 4, 5, 8, 5, 3, 5, 4, 5, 6, 5, 4, 9, 7, 6, 7, 5, 7, 9, 6, 7, 4, 3, 7, 6, 7, 6, 9, 7, 8, 7, 9, 8, 6, 9, 6, 11, 7, 8, 10, 8, 9, 7, 8, 7, 12, 9, 8, 9, 10, 7, 9, 5, 4, 6, 7, 8, 7, 11, 10, 8, 12, 11, 12, 11, 10, 6, 7, 6, 8, 7, 6, 11, 13, 12, 10, 11, 6, 7, 6, 8, 7, 6, 5, 12, 10, 7, 5, 4, 5, 9, 4, 6, 5, 8, 5, 7, 9, 7, 5, 6, 5, 4, 5, 6, 7, 5, 6, 8, 5, 8, 12, 9, 11, 5, 6, 8, 6, 10, 4, 6, 7, 5, 8, 5, 3, 5, 4, 6, 5, 6, 8, 5, 7, 6, 4, 8, 10, 7, 3, 8, 7, 5, 6, 10, 4, 5, 4, 5, 4, 5, 7, 6, 7, 10, 8, 9, 8, 2, 8, 6, 9, 7, 9, 8, 4, 5, 4, 5, 6, 5, 4, 6, 5, 6, 4, 11, 10, 7, 8, 7, 9, 10, 4, 5, 6, 5, 4, 6, 5, 10, 0, 2, 10, 7, 4, 6, 10, 6, 16, 5, 7, 5, 7, 5, 6, 9, 3, 6, 5, 7, 5, 6, 7, 5, 6, 8, 7, 5, 7, 6, 5, 9, 7, 16, 5, 4, 7, 5, 0, 6, 9, 10, 6, 12, 9, 12, 9, 6, 9, 3, 5, 6, 5, 6, 5, 7, 5, 8, 5, 7, 8, 5, 3, 8, 3, 8, 5, 11, 8, 5, 8, 11, 5, 8, 5, 12, 9, 24, 20, 24, 19, 16, 5, 10, 16, 9, 16, 10, 16, 6, 10, 16, 9, 16, 11, 12, 7, 11, 12, 9, 18, 10, 16, 10, 14, 10, 15, 10, 15, 11, 15, 10, 11, 13, 9, 16, 14, 10, 8, 11, 16, 11, 16, 9, 16, 6, 11, 13, 10, 13, 11, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 9, 8, 9, 6, 9, 8, 14, 9, 15, 10, 14, 9, 19, 15, 19, 13, 10, 12, 16, 5, 11, 8, 12, 13, 11, 13, 19, 11, 13, 7, 14, 12, 13, 8, 16, 14, 13, 11, 7, 6, 12, 10, 15, 5, 7, 6, 11, 12, 11, 12, 11, 9, 8, 13, 16, 11, 14, 16, 17, 18, 6, 8, 6, 7, 6, 12, 11, 13, 12, 10, 12, 10, 11, 12, 11, 12, 11, 9, 11, 7, 8, 14, 16, 14, 16, 14, 16, 14, 17, 16, 17, 16, 14, 9, 7, 9, 15, 17, 15, 17, 15, 10, 7, 6, 5, 6, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 13, 12, 10, 6, 13, 10, 13, 12, 6, 12, 13, 12, 13, 12, 10, 14, 15, 5, 13, 16, 15, 16, 15, 16, 11, 13, 6, 2, 7, 12, 14, 15, 14, 15, 14, 15, 14, 13, 14, 13, 12, 13, 17, 15, 14, 18, 6, 7, 6, 3, 5, 8, 5, 7, 5, 8, 9, 11, 12, 14, 15, 14, 15, 12, 15, 14, 15, 14, 13, 12, 13, 9, 11, 10, 13, 11, 14, 11, 19, 9, 17, 12, 18, 13, 10, 12, 13, 11, 9, 14, 11, 10, 11, 13, 8, 12, 11, 12, 9, 15, 9, 11, 8, 10, 9, 17, 13, 8, 17, 15, 13, 16, 11, 14, 10, 9, 11, 15, 12, 9, 11, 12, 10, 13, 14, 13, 8, 14, 12, 10, 9, 15, 14, 9, 7, 14, 10, 15, 10, 9, 12, 10, 12, 11, 6, 15, 11, 10, 11, 12, 0, 6, 15, 7, 13, 7, 5, 7, 6, 12, 10, 12, 11, 15, 11, 13, 17, 14, 17, 18, 0, 11, 7, 13, 10, 7, 10, 8, 10, 8, 7, 8, 7, 12, 5, 10, 6, 8, 5, 11, 0, 10, 13, 10, 12, 10, 12, 10, 11, 10, 9, 10, 9, 8, 7, 8, 6, 8, 11, 7, 11, 8, 10, 8, 11, 8, 11, 8, 10, 8, 11, 8, 17, 16, 15, 18, 15, 16, 17, 16, 14, 11, 10, 15, 12, 15, 12, 9, 7, 9, 10, 7, 0, 11, 9, 8, 11, 0, 12, 7, 9, 8, 9, 6, 13, 10, 11, 9, 11, 10, 13, 10, 11, 12, 9, 11, 9, 12, 10, 11, 12, 9, 11, 12, 9, 12, 9, 10, 9, 8, 10, 8, 6, 13, 10, 7, 10, 9, 7, 10, 11, 7, 0, 8, 7, 11, 9, 11, 8, 12, 10, 14, 9, 13, 11, 0, 13, 12, 16, 0, 15, 0, 11, 13, 11, 14, 11, 0, 10, 11, 13, 0, 13, 11, 9, 11, 9, 12, 11, 9, 10, 8, 10, 8, 11, 8, 9, 10, 9, 10, 9, 10, 11, 9, 8, 9, 8, 7, 8, 7, 8, 6, 0, 13, 11, 10, 14, 0, 13, 8, 11, 9, 10, 11, 8, 10, 11, 10, 11, 10, 11, 8, 11, 8, 11, 8, 11, 8, 11, 8, 11, 8, 0, 14, 9, 14, 0, 10, 0, 9, 11, 9, 0, 14, 9, 15, 0, 10, 9, 11, 9, 11, 9, 10, 8, 11, 8, 10, 8, 11, 8, 11, 8, 11, 10, 8, 10, 8, 9, 8, 12, 10, 14, 12, 10, 13, 14, 11, 14, 12, 14, 13, 15, 17, 13, 14, 11, 14, 11, 14, 11, 10, 12, 10, 11, 8, 11, 8, 13, 11, 8, 11, 8, 16, 8, 5, 7, 10, 8, 11, 9, 8, 9, 10, 8, 11, 8, 9, 8, 9, 8, 11, 7, 11, 12, 8, 11, 8, 11, 8, 15, 7, 9, 14, 12, 8, 14, 8, 7, 8, 12, 8, 10, 8, 9, 6, 10, 7, 5, 8, 10, 11, 8, 10, 6, 8, 7, 8, 7, 8, 7, 8, 7, 11, 7, 8, 7, 6, 7, 8, 7, 12, 7, 15, 7, 10, 7, 3, 9, 10, 9, 6, 7, 6, 8, 6, 5, 6, 10, 4, 11, 5, 7, 14, 9, 8, 4, 10, 16, 4, 2, 4, 2, 3, 9, 8, 4, 15, 10, 5, 9, 11, 7, 0, 19, 0, 14, 11, 13, 10, 11, 9, 11, 0, 9, 0, 9, 0, 5, 7, 6, 12, 6, 0, 7, 9, 0, 9, 16, 7, 9, 6, 8, 10, 11, 0, 12, 11, 0, 11, 0, 11, 0, 10, 11, 12, 0, 13, 11, 0, 12, 13, 11, 0, 11, 0, 10, 0, 10, 8, 0, 11, 0, 11, 12, 0, 17, 11, 12, 10, 12, 11, 10, 8, 7, 8, 9, 5, 9, 17, 10, 18, 8, 10, 7, 8, 10, 11, 10, 12, 10, 8, 10, 9, 7, 9, 10, 11, 10, 9, 11, 9, 10, 14, 13, 9, 10, 13, 14, 11, 10, 9, 8, 11, 10, 9, 17, 12, 20, 17, 20, 12, 17, 27, 26, 25, 29, 20, 15, 12, 10, 12, 10, 15, 12, 10, 12, 11, 10, 12, 11, 12, 9, 11, 10, 11, 10, 9, 12, 13, 11, 7, 10, 11, 16, 11, 10, 11, 13, 16, 18, 10, 12, 11, 10, 11, 13, 12, 17, 11, 19, 11, 10, 19, 13, 21, 16, 17, 11, 9, 10, 14, 9, 12, 15, 12, 8, 17, 20, 14, 20, 13, 19, 21, 16, 9, 8, 20, 17, 8, 24, 8, 13, 35, 31, 32, 8, 32, 21, 22, 8, 20, 17, 16, 18, 21, 8, 24, 20, 19, 16, 20, 13, 15, 13, 14, 18, 13, 22, 19, 8, 15, 11, 14, 15, 21, 20, 12, 9, 22, 26, 13, 25, 18, 16, 23, 15, 19, 17, 26, 23, 14, 8, 34, 24, 8, 18, 17, 25, 14, 30, 19, 26, 24, 8, 17, 20, 8, 11, 8, 15, 20, 8, 11, 8, 16, 8, 16, 19, 29, 23, 8, 19, 13, 8, 18, 14, 20, 15, 20, 14, 20, 8, 10, 8, 11, 10, 11, 8, 11, 10, 18, 16, 11, 8, 11, 10, 11, 14, 18, 11, 12, 10, 12, 9, 11, 8, 11, 8, 11, 16, 20, 17, 15, 11, 8, 15, 19, 8, 9, 10, 8, 9, 11, 10, 7, 11, 9, 8, 17, 25, 8, 10, 8, 10, 14, 10, 8, 10, 8, 19, 15, 21, 16, 10, 15, 8, 16, 11, 9, 11, 8, 10, 11, 12, 9, 20, 17, 11, 8, 11, 9, 11, 14, 20, 11, 17, 9, 12, 9, 12, 11, 8, 11, 10, 8, 12, 20, 15, 11, 14, 11, 12, 11, 8, 13, 18, 14, 8, 17, 18, 32, 22, 14, 35, 22, 16, 18, 15, 16, 20, 18, 13, 21, 18, 14, 15, 13, 9, 8, 29, 8, 12, 42, 35, 8, 31, 25, 8, 25, 20, 12, 15, 22, 8, 28, 25, 23, 19, 18, 15, 17, 18, 15, 10, 16, 15, 8, 12, 19, 12, 8, 13, 25, 8, 15, 20, 8, 16, 8, 12, 17, 8, 13, 34, 18, 8, 15, 13, 8, 22, 17, 13, 17, 22, 18, 8, 11, 17, 8, 9, 10, 11, 8, 9, 10, 11, 8, 10, 8, 15, 12, 8, 12, 23, 8, 20, 8, 12, 16, 12, 15, 8, 12, 8, 9, 10, 8, 10, 11, 8, 10, 11, 10, 11, 10, 12, 11, 8, 10, 9, 10, 11, 10, 11, 10, 11, 9, 8, 12, 10, 8, 9, 11, 10, 11, 13, 10, 8, 17, 12, 8, 15, 8, 10, 8, 10, 14, 8, 16, 8, 10, 14, 8, 14, 10, 8, 10, 15, 13, 15, 7, 10, 8, 9, 12, 8, 13, 8, 9, 12, 13, 9, 12, 8, 12, 10, 12, 13, 10, 9, 13, 12, 13, 9, 12, 13, 9, 19, 8, 19, 15, 8, 15, 14, 15, 10, 12, 10, 19, 15, 8, 14, 10, 8, 21, 11, 9, 10, 9, 8, 10, 8, 11, 12, 10, 8, 10, 8, 10, 8, 10, 14, 8, 10, 8, 10, 8, 10, 8, 11, 8, 10, 11, 10, 11, 10, 8, 11, 10, 11, 10, 11, 10, 11, 12, 10, 11, 12, 11, 8, 12, 9, 8, 11, 13, 15, 12, 8, 16, 10, 8, 11, 13, 7, 9, 8, 13, 12, 10, 11, 10, 9, 10, 13, 8, 12, 9, 8, 11, 8, 9, 11, 10, 9, 11, 8, 11, 14, 11, 9, 10, 19, 11, 14, 15, 11, 10, 14, 8, 10, 11, 8, 9, 11, 9, 11, 9, 11, 9, 11, 9, 11, 9, 8, 9, 11, 9, 8, 11, 9, 8, 12, 11, 9, 8, 10, 9, 11, 12, 10, 11, 12, 9, 11, 10, 12, 11, 10, 8, 15, 12, 11, 16, 10, 11, 10, 9, 13, 11, 8, 5, 8, 10, 7, 10, 12, 14, 11, 13, 9, 13, 11, 13, 8, 10, 16, 8, 10, 14, 10, 14, 15, 14, 8, 10, 8, 9, 12, 10, 12, 10, 13, 12, 8, 11, 12, 10, 13, 10, 11, 9, 11, 13, 9, 10, 9, 11, 13, 11, 9, 11, 13, 17, 10, 12, 14, 12, 9, 17, 13, 15, 10, 8, 12, 8, 20, 8, 1232, 8, 1232, 8, 0, 7, 10, 7, 9, 17, 12, 10, 9, 10, 8, 11, 12, 9, 7, 17, 11, 9, 10, 8, 7, 9, 11, 12, 13, 9, 0, 1236, 8, 5, 13, 9, 13, 8, 5, 9, 11, 12, 11, 8, 5, 19, 11, 9, 11, 5, 9, 13, 11, 12, 10, 11, 10, 9, 14, 4, 12, 9, 4, 7, 11, 5, 19, 11, 8, 12, 0, 1227, 8, 10, 6, 5, 4, 8, 7, 5, 7, 9, 18, 13, 8, 5, 10, 0, 10, 17, 18, 10, 5, 3, 13, 10, 7, 10, 7, 5, 9, 7, 8, 13, 10, 1236, 18, 13, 9, 13, 9, 18, 13, 8, 5, 9, 11, 10, 7, 3, 0, 3, 10, 9, 11, 8, 5, 8, 0, 10, 7, 5, 8, 5, 8, 10, 9, 13, 3, 0, 9, 18, 13, 8, 5, 9, 11, 5, 11, 3, 10, 3, 7, 3, 7, 0, 6, 5, 0, 5, 0, 14, 10, 9, 11, 4, 5, 4, 0, 15, 12, 21, 12, 6, 3, 9, 12, 1094, 8, 10, 8, 7, 8, 7, 8, 5, 4, 8, 7, 4, 8, 5, 4, 8, 7, 5, 7, 8, 12, 10, 5, 10, 4, 10, 5, 10, 6, 10, 0, 10, 12, 8, 6, 3, 8, 9, 10, 8, 13, 6, 8, 13, 8, 9, 8, 13, 6, 8, 7, 8, 4, 9, 8, 12, 5, 8, 9, 10, 8, 9, 8, 13, 8, 5, 4, 5, 4, 6, 8, 11, 12, 11, 9, 10, 8, 12, 13, 11, 12, 10, 12, 10, 11, 9, 13, 11, 12, 10, 8, 11, 12, 9, 10, 12, 13, 9, 10, 11, 12, 11, 13, 8, 12, 8, 11, 6, 8, 10, 11, 7, 12, 13, 15, 12, 15, 7, 9, 11, 13, 12, 13, 8, 9, 8, 12, 8, 12, 7, 9, 11, 14, 7, 9, 8, 10, 7, 11, 7, 11, 7, 11, 7, 11, 8, 12, 8, 12, 8, 12, 9, 11, 9, 11, 7, 8, 6, 8, 11, 14, 7, 12, 7, 12, 7, 9, 11, 13, 7, 11, 7, 11, 3, 10, 14, 8, 10, 9, 12, 9, 12, 8, 11, 8, 11, 14, 5, 9, 14, 9, 14, 7, 10, 8, 10, 8, 10, 13, 7, 11, 8, 11, 8, 11, 7, 10, 7, 11, 7, 11, 13, 17, 10, 14, 9, 11, 9, 13, 8, 11, 7, 11, 7, 11, 6, 8, 11, 14, 8, 10, 6, 9, 6, 7, 8, 9, 8, 9, 12, 0, 12, 0, 5, 7, 11, 10, 19, 13, 19, 9, 12, 17, 21, 9, 13, 9, 13, 8, 12, 10, 12, 6, 8, 15, 19, 11, 14, 13, 17, 9, 12, 11, 15, 9, 11, 10, 19, 9, 8, 9, 7, 12, 4, 3, 6, 7, 6, 7, 12, 7, 11, 8, 11, 8, 9, 7, 9, 7, 8, 9, 8, 9, 10, 8, 7, 9, 6, 11, 7, 8, 6, 8, 7, 11, 16, 11, 9, 14, 11, 15, 10, 11, 13, 11, 9, 11, 9, 11, 12, 11, 14, 11, 8, 14, 9, 11, 9, 10, 9, 11, 12, 14, 6, 5, 9, 11, 9, 12, 9, 11, 8, 10, 14, 11, 8, 10, 6, 12, 4, 7, 8, 9, 6, 8, 11, 9, 11, 9, 7, 11, 8, 10, 12, 13, 9, 12, 7, 9, 7, 9, 7, 11, 8, 12, 9, 11, 8, 12, 14, 12, 8, 12, 11, 8, 4, 11, 10, 7, 9, 8, 6, 9, 7, 8, 7, 9, 8, 4, 8, 7, 8, 7, 8, 4, 8, 7, 8, 11, 5, 12, 11, 9, 12, 9, 11, 12, 10, 12, 14, 12, 5, 12, 11, 9, 10, 9, 10, 11, 4, 12, 13, 12, 7, 13, 11, 4, 11, 5, 12, 4, 7, 5, 12, 5, 12, 7, 0, 5, 6, 5, 4, 5, 7, 5, 6, 4, 5, 3, 5, 6, 5, 7, 5, 4, 16, 5, 16, 5, 16, 5, 9, 4, 5, 6, 4, 5, 7, 5, 3, 2, 5, 10, 8, 9, 13, 10, 7, 9, 14, 13, 7, 8, 7, 8, 4, 9, 7, 8, 12, 7, 8, 7, 8, 12, 8, 9, 8, 4, 5, 7, 5, 6, 8, 5, 9, 11, 10, 8, 12, 9, 4, 8, 7, 8, 7, 8, 5, 7, 9, 7, 10, 7, 8, 7, 8, 7, 8, 12, 5, 11, 8, 11, 4, 6, 7, 10, 12, 11, 6, 9, 7, 6, 10, 8, 11, 12, 4, 5, 8, 4, 7, 11, 8, 12, 8, 12, 8, 12, 8, 12, 7, 10, 7, 11, 7, 10, 8, 10, 8, 10, 7, 11, 6, 9, 4, 10, 6, 9, 7, 11, 7, 11, 5, 10, 5, 10, 8, 12, 8, 12, 3, 5, 3, 5, 7, 9, 7, 9, 7, 11, 7, 11, 8, 12, 11, 13, 7, 11, 7, 12, 9, 15, 7, 11, 15, 19, 21, 4, 7, 9, 8, 12, 8, 12, 8, 12, 7, 11, 8, 12, 11, 13, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 8, 12, 3, 5, 7, 11, 12, 16, 18, 9, 14, 16, 15, 19, 21, 5, 4, 5, 3, 8, 7, 8, 7, 9, 7, 10, 8, 13, 12, 9, 12, 10, 4, 10, 4, 6, 9, 6, 9, 8, 10, 11, 15, 8, 12, 8, 12, 13, 8, 4, 8, 12, 5, 4, 12, 8, 9, 8, 12, 10, 8, 9, 13, 11, 7, 11, 8, 9, 8, 9, 12, 8, 4, 6, 9, 6, 9, 6, 9, 11, 7, 11, 15, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 4, 9, 7, 9, 4, 10, 6, 9, 6, 9, 6, 9, 6, 9, 5, 10, 5, 10, 5, 10, 11, 14, 8, 12, 8, 12, 8, 12, 7, 11, 9, 7, 12, 7, 12, 7, 12, 3, 9, 6, 9, 6, 9, 3, 9, 3, 9, 8, 12, 4, 6, 7, 11, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 9, 7, 9, 7, 9, 7, 9, 7, 9, 8, 11, 10, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 8, 7, 8, 9, 8, 7, 8, 3, 7, 11, 7, 8, 10, 11, 12, 9, 12, 11, 5, 9, 11, 13, 11, 7, 12, 7, 5, 4, 5, 7, 5, 9, 6, 8, 12, 0, 9, 7, 5, 12, 5, 8, 3, 8, 5, 4, 12, 8, 9, 8, 3, 7, 6, 7, 11, 7, 4, 6, 5, 8, 7, 11, 3, 8, 4, 3, 7, 4, 7, 8, 7, 8, 7, 5, 8, 5, 4, 5, 9, 11, 15, 11, 9, 10, 12, 9, 12, 14, 9, 12, 6, 5, 11, 9, 11, 10, 11, 15, 7, 9, 4, 3, 8, 4, 6, 4, 9, 8, 5, 3, 12, 13, 8, 5, 3, 12, 0, 12, 0 };

            for (int i = 0; i < charcode.Length; i++)
            {
                if (code >= charcode[i])
                {
                    return charlength[i];
                }
            }

            return 0;
        }
        #endregion

        #region = UBB代码处理函数 =
        /// <summary>
        /// UBB代码处理函数
        /// </summary>
        /// <param name="sDetail">输入字符串</param>
        /// <returns>输出字符串</returns>
        public static string UBBToHTML(string sDetail)
        {
            Regex r;
            Match m;
            #region 处理空格
            r = new Regex("(<.+) (.+>)", RegexOptions.IgnoreCase);

            do
            {
                m = r.Match(sDetail);
                sDetail = r.Replace(sDetail, "$1&nbspII;$2");
            } while (m.Success == true);


            sDetail = sDetail.Replace(" ", "&nbsp;");
            sDetail = sDetail.Replace("&nbspII;", " ");

            //sDetail = sDetail.Replace(" ", "&nbsp;");
            #endregion
            #region 处理单引号
            //sDetail = sDetail.Replace("'", "’");
            #endregion
            #region 处理双引号
            //sDetail = sDetail.Replace("\"", "&quot;");
            #endregion
            #region html标记符
            //sDetail = sDetail.Replace("<", "&lt;");
            //sDetail = sDetail.Replace(">", "&gt;");

            #endregion
            #region 处理换行
            //处理换行，在每个新行的前面添加两个全角空格
            r = new Regex(@"(\r\n((&nbsp;)|　)+)(?<正文>\S+)", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<BR>　　" + m.Groups["正文"].ToString());
            }
            //处理换行，在每个新行的前面添加两个全角空格
            sDetail = sDetail.Replace("\r\n", "<BR>");
            #endregion
            #region 处[b][/b]标记
            sDetail = Regex.Replace(sDetail, @"\[b\]", "<b>", RegexOptions.IgnoreCase);
            sDetail = Regex.Replace(sDetail, @"\[\/b\]", "</b>", RegexOptions.IgnoreCase);

            //r = new Regex(@"(\[b\])([ \S\t]*?)(\[\/b\])", RegexOptions.IgnoreCase);
            //for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            //{
            //    sDetail = sDetail.Replace(m.Groups[0].ToString(), "<B>" + m.Groups[2].ToString() + "</B>");
            //}
            #endregion
            #region 处[i][/i]标记
            r = new Regex(@"(\[i\])([ \S\t]*?)(\[\/i\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<I>" + m.Groups[2].ToString() + "</I>");
            }
            #endregion
            #region 处[u][/u]标记
            r = new Regex(@"(\[U\])([ \S\t]*?)(\[\/U\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<U>" + m.Groups[2].ToString() + "</U>");
            }
            #endregion
            #region 处[p][/p]标记
            //处[p][/p]标记
            r = new Regex(@"((\r\n)*\[p\])(.*?)((\r\n)*\[\/p\])", RegexOptions.IgnoreCase | RegexOptions.Singleline);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<P class=\"pstyle\">" + m.Groups[3].ToString() + "</P>");
            }
            #endregion
            #region 处[sup][/sup]标记
            //处[sup][/sup]标记
            r = new Regex(@"(\[sup\])([ \S\t]*?)(\[\/sup\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<SUP>" + m.Groups[2].ToString() + "</SUP>");
            }
            #endregion
            #region 处[sub][/sub]标记
            //处[sub][/sub]标记
            r = new Regex(@"(\[sub\])([ \S\t]*?)(\[\/sub\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<SUB>" + m.Groups[2].ToString() + "</SUB>");
            }
            #endregion
            #region 处[url][/url]标记
            //处[url][/url]标记
            r = new Regex(@"(\[url\])([ \S\t]*?)(\[\/url\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<A href=\"" + m.Groups[2].ToString() + "\" target=\"_blank\">" +
                 m.Groups[2].ToString() + "</A>");
            }
            #endregion
            #region 处[url=xxx][/url]标记
            //处[url=xxx][/url]标记
            r = new Regex(@"(\[url=([ \S\t]+)\])([ \S\t]*?)(\[\/url\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<A href=\"" + m.Groups[2].ToString() + "\" target=\"_blank\">" +
                 m.Groups[3].ToString() + "</A>");
            }
            #endregion
            #region 处[email][/email]标记
            //处[email][/email]标记
            r = new Regex(@"(\[email\])([ \S\t]*?)(\[\/email\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<A href=\"mailto:" + m.Groups[2].ToString() + "\" target=\"_blank\">" +
                 m.Groups[2].ToString() + "</A>");
            }
            #endregion
            #region 处[email=xxx][/email]标记
            //处[email=xxx][/email]标记
            r = new Regex(@"(\[email=([ \S\t]+)\])([ \S\t]*?)(\[\/email\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<A href=\"mailto:" + m.Groups[2].ToString() + "\" target=\"_blank\">" +
                 m.Groups[3].ToString() + "</A>");
            }
            #endregion
            #region 处[size=x][/size]标记
            //处[size=x][/size]标记
            sDetail = Regex.Replace(sDetail, @"\[size=([1-7])\]", "<font size=\"$1\">");
            sDetail = Regex.Replace(sDetail, @"\[\/size\]", "</font>");

            //r = new Regex(@"(\[size=([1-7])\])([ \S\t]*?)(\[\/size\])", RegexOptions.IgnoreCase);
            //for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            //{
            //    sDetail = sDetail.Replace(m.Groups[0].ToString(),
            //     "<font size=" + m.Groups[2].ToString() + ">" +
            //     m.Groups[3].ToString() + "</font>");
            //}
            #endregion
            #region 处[color=x][/color]标记
            //处[color=x][/color]标记
            sDetail = Regex.Replace(sDetail, @"\[color=([\S]+?)\]", "<font color=\"$1\">");
            sDetail = Regex.Replace(sDetail, @"\[\/color\]", "</font>");
            //r = new Regex(@"(\[color=([\S]+)\])([\S\s]*?)(\[\/color\])", RegexOptions.IgnoreCase);
            //for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            //{
            //    sDetail = sDetail.Replace(m.Groups[0].ToString(),
            //     "<font color=" + m.Groups[2].ToString() + ">" +
            //     m.Groups[3].ToString() + "</font>");
            //}
            #endregion
            #region 处[font=x][/font]标记
            //处[font=x][/font]标记
            r = new Regex(@"(\[font=([\S]+)\])([ \S\t]*?)(\[\/font\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<font face=" + m.Groups[2].ToString() + ">" +
                 m.Groups[3].ToString() + "</font>");
            }
            #endregion
            #region 处理图片链接
            //处理图片链接
            r = new Regex("\\[picture\\](\\d+?)\\[\\/picture\\]", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<A href=\"ShowImage.aspx?Type=ALL&Action=forumImage&ImageID=" + m.Groups[1].ToString() +
                 "\" target=\"_blank\"><IMG border=0 Title=\"点击打开新窗口查看\" src=\"ShowImage.aspx?Action=forumImage&ImageID=" + m.Groups[1].ToString() +
                 "\"></A>");
            }
            #endregion
            #region 处理[align=x][/align]
            //处理[align=x][/align]
            r = new Regex(@"(\[align=([\S]+)\])([ \S\t]*?)(\[\/align\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<P align=" + m.Groups[2].ToString() + ">" +
                 m.Groups[3].ToString() + "</P>");
            }
            #endregion
            #region 处[H=x][/H]标记
            //处[H=x][/H]标记
            r = new Regex(@"(\[H=([1-6])\])([ \S\t]*?)(\[\/H\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<H" + m.Groups[2].ToString() + ">" +
                 m.Groups[3].ToString() + "</H" + m.Groups[2].ToString() + ">");
            }
            #endregion
            #region 处理[list=x][*][/list]
            //处理[list=x][*][/list]
            r = new Regex(@"(\[list(=(A|a|I|i| ))?\]([ \S\t]*)\r\n)((\[\*\]([ \S\t]*\r\n))*?)(\[\/list\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                string strLI = m.Groups[5].ToString();
                Regex rLI = new Regex(@"\[\*\]([ \S\t]*\r\n?)", RegexOptions.IgnoreCase);
                Match mLI;
                for (mLI = rLI.Match(strLI); mLI.Success; mLI = mLI.NextMatch())
                {
                    strLI = strLI.Replace(mLI.Groups[0].ToString(), "<LI>" + mLI.Groups[1]);
                }
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<UL TYPE=\"" + m.Groups[3].ToString() + "\"><B>" + m.Groups[4].ToString() + "</B>" +
                 strLI + "</UL>");
            }

            #endregion
            #region 处[SHADOW=x][/SHADOW]标记
            //处[SHADOW=x][/SHADOW]标记
            r = new Regex(@"(\[SHADOW=)(\d*?),(\w*?),(\d*?)\]([\S\t]*?)(\[\/SHADOW\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<TABLE WIDTH=" + m.Groups[2].ToString() + "  STYLE=FILTER:SHADOW(COLOR=" + m.Groups[3].ToString() + ", STRENGTH=" + m.Groups[4].ToString() + ")>" +
                 m.Groups[5].ToString() + "</TABLE>");
            }
            #endregion
            #region 处[glow=x][/glow]标记
            //处[glow=x][/glow]标记
            r = new Regex(@"(\[glow=)(\d*?),(#*\w*?),(\d*?)\]\[([\S\t]*?)\](\[\/glow\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<TABLE WIDTH=" + m.Groups[2].ToString() + "  STYLE=FILTER:GLOW(COLOR=" + m.Groups[3].ToString() + ", STRENGTH=" + m.Groups[4].ToString() + ")>" +
                 m.Groups[5].ToString() + "</TABLE>");
            }
            #endregion
            #region 处[center][/center]标记
            r = new Regex(@"(\[center\])([ \S\t]*?)(\[\/center\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<CENTER>" + m.Groups[2].ToString() + "</CENTER>");
            }
            #endregion
            #region 处[IMG][/IMG]标记
            r = new Regex(@"(\[IMG\])(http|https|ftp):\/\/([ \S\t]*?)(\[\/IMG\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<br><a onfocus=this.blur() href=" + m.Groups[2].ToString() + "://" + m.Groups[3].ToString() + " target=_blank><IMG SRC=" + m.Groups[2].ToString() + "://" + m.Groups[3].ToString() + " border=0 alt=按此在新窗口浏览图片 onload=javascript:if(screen.width-333<this.width)this.width=screen.width-333></a>");
            }
            #endregion
            #region 处[em]标记
            r = new Regex(@"(\[em([\S\t]*?)\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<img src=pic/em" + m.Groups[2].ToString() + ".gif border=0 align=middle>");
            }
            #endregion
            #region 处[flash=x][/flash]标记
            //处[mp=x][/mp]标记
            r = new Regex(@"(\[flash=)(\d*?),(\d*?)\]\[([\S\t]*?)\](\[\/flash\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<a href=" + m.Groups[4].ToString() + " TARGET=_blank><IMG SRC=pic/swf.gif border=0 alt=点击开新窗口欣赏该FLASH动画!> [全屏欣赏]</a><br><br><OBJECT codeBase=http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,29,0 classid=clsid:D27CDB6E-AE6D-11cf-96B8-444553540000 width=" + m.Groups[2].ToString() + " height=" + m.Groups[3].ToString() + "><PARAM NAME=movie VALUE=" + m.Groups[4].ToString() + "><PARAM NAME=quality VALUE=high><param name=menu value=false><embed src=" + m.Groups[4].ToString() + " quality=high menu=false pluginspage=http://www.macromedia.com/go/getflashplayer type=application/x-shockwave-flash width=" + m.Groups[2].ToString() + " height=" + m.Groups[3].ToString() + ">" + m.Groups[4].ToString() + "</embed></OBJECT>");
            }
            #endregion
            #region 处[dir=x][/dir]标记
            //处[dir=x][/dir]标记
            r = new Regex(@"(\[dir=)(\d*?),(\d*?)\]\[([\S\t]*?)\](\[\/dir\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<object classid=clsid:166B1BCA-3F9C-11CF-8075-444553540000 codebase=http://download.macromedia.com/pub/shockwave/cabs/director/sw.cab#version=7,0,2,0 width=" + m.Groups[2].ToString() + " height=" + m.Groups[3].ToString() + "><param name=src value=" + m.Groups[4].ToString() + "><embed src=" + m.Groups[4].ToString() + " pluginspage=http://www.macromedia.com/shockwave/download/ width=" + m.Groups[2].ToString() + " height=" + m.Groups[3].ToString() + "></embed></object>");
            }
            #endregion
            #region 处[rm=x][/rm]标记
            //处[rm=x][/rm]标记
            r = new Regex(@"(\[rm=)(\d*?),(\d*?)\]\[([\S\t]*?)\](\[\/rm\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<OBJECT classid=clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA class=OBJECT id=RAOCX width=" + m.Groups[2].ToString() + " height=" + m.Groups[3].ToString() + "><PARAM NAME=SRC VALUE=" + m.Groups[4].ToString() + "><PARAM NAME=CONSOLE VALUE=Clip1><PARAM NAME=CONTROLS VALUE=imagewindow><PARAM NAME=AUTOSTART VALUE=true></OBJECT><br><OBJECT classid=CLSID:CFCDAA03-8BE4-11CF-B84B-0020AFBBCCFA height=32 id=video2 width=" + m.Groups[2].ToString() + "><PARAM NAME=SRC VALUE=" + m.Groups[4].ToString() + "><PARAM NAME=AUTOSTART VALUE=-1><PARAM NAME=CONTROLS VALUE=controlpanel><PARAM NAME=CONSOLE VALUE=Clip1></OBJECT>");
            }
            #endregion
            #region 处[mp=x][/mp]标记
            //处[mp=x][/mp]标记
            r = new Regex(@"(\[mp=)(\d*?),(\d*?)\]\[([\S\t]*?)\](\[\/mp\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<object align=middle classid=CLSID:22d6f312-b0f6-11d0-94ab-0080c74c7e95 class=OBJECT id=MediaPlayer width=" + m.Groups[2].ToString() + " height=" + m.Groups[3].ToString() + " ><param name=ShowStatusBar value=-1><param name=Filename value=" + m.Groups[4].ToString() + "><embed type=application/x-oleobject codebase=http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=5,1,52,701 flename=mp src=" + m.Groups[4].ToString() + "  width=" + m.Groups[2].ToString() + " height=" + m.Groups[3].ToString() + "></embed></object>");
            }
            #endregion
            #region 处[qt=x][/qt]标记
            //处[qt=x][/qt]标记
            r = new Regex(@"(\[qt=)(\d*?),(\d*?)\]\[([\S\t]*?)\](\[\/qt\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<embed src=" + m.Groups[4].ToString() + " width=" + m.Groups[2].ToString() + " height=" + m.Groups[3].ToString() + " autoplay=true loop=false controller=true playeveryframe=false cache=false scale=TOFIT bgcolor=#000000 kioskmode=false targetcache=false pluginspage=http://www.apple.com/quicktime/>");
            }
            #endregion
            #region 处[QUOTE][/QUOTE]标记
            r = new Regex(@"(\[QUOTE\])\[([ \S\t]*?)\](\[\/QUOTE\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<table cellpadding=0 cellspacing=0 border=1 WIDTH=94% bordercolor=#000000 bgcolor=#F2F8FF align=center  style=FONT-SIZE: 9pt><tr><td  ><table width=100% cellpadding=5 cellspacing=1 border=0><TR><TD >" + m.Groups[2].ToString() + "</table></table><br>");
            }
            #endregion
            #region 处[move][/move]标记
            r = new Regex(@"(\[move\])\[([ \S\t]*?)\](\[\/move\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<MARQUEE scrollamount=3>" + m.Groups[2].ToString() + "</MARQUEE>");
            }
            #endregion
            #region 处[FLY][/FLY]标记
            r = new Regex(@"(\[FLY\])\[([ \S\t]*?)\](\[\/FLY\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(), "<MARQUEE width=80% behavior=alternate scrollamount=3>" + m.Groups[2].ToString() + "</MARQUEE>");
            }
            #endregion
            #region 处[image][/image]标记
            //处[image][/image]标记
            r = new Regex(@"(\[image\])\[([ \S\t]*?)\](\[\/image\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<img src=\"" + m.Groups[2].ToString() + "\" border=0 align=middle onload=\"javascript:if(this.width>screen.width-333)this.width=screen.width-333\"><br>");
            }
            #endregion
            #region 处[upload][/upload]标记
            //处[upload][/upload]标记
            r = new Regex(@"(\[upload\])([ \S\t]*?)(\[\/upload\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<img src=\"" + m.Groups[2].ToString() + "\" border=0 align=middle onload=\"javascript:if(this.width>screen.width-333)this.width=screen.width-333\"><br>");
            }
            #endregion
            #region 处[upload][/upload]标记
            //处[upload][/upload]标记
            r = new Regex(@"(\[uploadzip\])([ \S\t]*?)(\[\/uploadzip\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<a href=\"" + m.Groups[2].ToString() + "\" border=0 align=middle><img src=\"/images/Fileico/rar.gif\" border=\"0\"></a><br>");
            }
            #endregion

            #region 处[UPLOADpdf][/UPLOADpdf]标记
            //处[UPLOADpdf][/UPLOADpdf]标记
            r = new Regex(@"(\[UPLOADpdf\])([ \S\t]*?)(\[\/UPLOADpdf\])", RegexOptions.IgnoreCase);
            for (m = r.Match(sDetail); m.Success; m = m.NextMatch())
            {
                sDetail = sDetail.Replace(m.Groups[0].ToString(),
                 "<a href=\"" + m.Groups[2].ToString() + "\" border=0 align=middle><img src=\"/images/Fileico/rar.gif\" border=\"0\"></a><br>");
            }
            #endregion



            return sDetail;
        }
        #endregion

        #region = Replicate =
        /// <summary>
        /// 以指定的次数重复字符表达式
        /// </summary>
        /// <param name="character">由字符数据组成的字母数字表达式。</param>
        /// <param name="number">是正整数。如果为负，则返回空字符串。</param>
        /// <returns>返回具有指定长度的、重复字符组成的字符串。</returns>
        public static string Replicate(string character, int number)
        {
            if (number < 1)
            {
                return string.Empty;
            }

            //StringBuilder str = new StringBuilder(character, number);

            StringBuilder str = new StringBuilder();

            for (int i = 0; i < number; i++)
            {
                str.Append(character);
            }

            return str.ToString();
        }
        #endregion

        #region = Html =

        #region = Filter HTML =
        /// <summary>
        /// Filters the script.
        /// </summary>
        /// <param name="content">The content.</param>
        /// <returns></returns>
        public static string FilterScript(string content)
        {
            if (string.IsNullOrEmpty(content) == true)
            {
                return content;
            }
            string regexstr = @"(?i)<script([^>])*>(\w|\W)*?</script([^>])*>";//@"<script.*</script>";
            content = Regex.Replace(content, regexstr, string.Empty, RegexOptions.IgnoreCase);
            content = Regex.Replace(content, "<script([^>])*?>", string.Empty, RegexOptions.IgnoreCase);
            content = Regex.Replace(content, "</script>", string.Empty, RegexOptions.IgnoreCase);

            regexstr = @" href *= *[\s\S]*?script *:.+?""";
            //content = Regex.Replace(content, regexstr, string.Empty, RegexOptions.IgnoreCase);

            regexstr = @" on\w+?="".+?"" ";
            content = Regex.Replace(content, regexstr, " ", RegexOptions.IgnoreCase);

            return content;
        }

        public static string FilterIFrame(string content)
        {
            if (string.IsNullOrEmpty(content) == true)
            {
                return content;
            }
            string regexstr = @"(?i)<iframe([^>])*>(\w|\W)*</iframe([^>])*>";//@"<script.*</script>";
            content = Regex.Replace(content, regexstr, string.Empty, RegexOptions.IgnoreCase);
            content = Regex.Replace(content, "<iframe([^>])*>", string.Empty, RegexOptions.IgnoreCase);
            return Regex.Replace(content, "</iframe>", string.Empty, RegexOptions.IgnoreCase);
        }

        public static string FilterFrameset(string content)
        {
            if (string.IsNullOrEmpty(content) == true)
            {
                return content;
            }
            string regexstr = @"(?i)<iframe([^>])*>(\w|\W)*</frameset([^>])*>";//@"<script.*</script>";
            content = Regex.Replace(content, regexstr, string.Empty, RegexOptions.IgnoreCase);
            content = Regex.Replace(content, "<frameset([^>])*>", string.Empty, RegexOptions.IgnoreCase);
            return Regex.Replace(content, "</frameset>", string.Empty, RegexOptions.IgnoreCase);
        }
        #endregion

        /// <summary>
        /// Removes the HTML.
        /// </summary>
        /// <param name="html">The HTML.</param>
        /// <returns></returns>
        [Obsolete("HtmlHelper.RemoveHtml")]
        public static string RemoveHtml(string html)
        {
            return HtmlTool.RemoveHtml(html);
        }

        public static string RemoveHtmlTag(string content, string[] tags)
        {
            string regexstr1, regexstr2;
            foreach (string tag in tags)
            {
                if (string.IsNullOrEmpty(tag) == false)
                {
                    regexstr1 = string.Format(@"<{0}([^>])*>", tag);
                    regexstr2 = string.Format(@"</{0}([^>])*>", tag);
                    content = Regex.Replace(content, regexstr1, string.Empty, RegexOptions.IgnoreCase);
                    content = Regex.Replace(content, regexstr2, string.Empty, RegexOptions.IgnoreCase);
                }
            }
            return content;

        }

        public static string RemoveHtmlTag(string content, string tag)
        {
            string returnStr;
            string regexstr1 = string.Format(@"<{0}([^>])*>", tag);
            string regexstr2 = string.Format(@"</{0}([^>])*>", tag);
            returnStr = Regex.Replace(content, regexstr1, string.Empty, RegexOptions.IgnoreCase);
            returnStr = Regex.Replace(returnStr, regexstr2, string.Empty, RegexOptions.IgnoreCase);
            return returnStr;

        }

        public static string ReplaceSpace(string content)
        {
            string findstr = "(?<fore>(?:(?:[^< ])*(?:<(?:!--(?:(?:[^-])*(?:(?=-->)|-))*--|(?:[^>])+)>)?)*)[ ](?<back>(?:(?:[^< ])*(?:<(?:!--(?:(?:[^-])*(?:(?=-->)|-))*--|(?:[^>])+)>)?)*)";
            //"(?<fore>(?:[^< ]*(?:<[^>]+>)?)*)[ ](?<back>(?:[^< ]*(?:<[^>]+>)?)*)";
            string replacestr = "${fore}&nbsp;${back}";
            return Regex.Replace(content, findstr, replacestr, RegexOptions.IgnoreCase);

        }

        public static string[] CatchHtmlBlock(string content, string tag)
        {
            string findstr = string.Format(@"(?i)<{0}([^>])*>(\w|\W)*</{1}([^>])*>", tag, tag);
            System.Text.RegularExpressions.MatchCollection matchs = System.Text.RegularExpressions.Regex.Matches(content, findstr, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            string[] strArray = new string[matchs.Count];
            for (int i = 0; i < strArray.Length; i++)
            {
                strArray[i] = matchs[i].Value;
            }
            return strArray;
        }

        #endregion

        #region = BigImage =
        /// <summary>
        /// 大图处理
        /// </summary>
        /// <param name="strSource">源码</param>
        /// <returns>处理过后的图</returns>
        public static string BigImage(string strSource)
        {
            strSource = Regex.Replace(strSource, "onmousewheel=\"return bbimg(this)\"", string.Empty, RegexOptions.IgnoreCase);
            const int MaxWidth = 600;

            string strre = @"<img.+? width=(\S+) .+?>";

            Regex r = new Regex(strre, RegexOptions.IgnoreCase);

            Match m = r.Match(strSource);

            string strWidth, NewWidth;
            string imgHtml, NewimgHtml;
            int intWidth;

            while (m.Success)
            {
                imgHtml = m.Value;
                strWidth = m.Groups[1].Value;

                //处理
                NewWidth = strWidth;
                NewWidth = NewWidth.Replace("\"", "");
                NewWidth = NewWidth.Replace("'", "");

                if (CharTool.IsNumeric(NewWidth) == true) //是否数字
                {
                    intWidth = int.Parse(NewWidth);

                    if (intWidth > MaxWidth) //是否过界
                    {
                        //宽度处理
                        NewWidth = strWidth.Replace(NewWidth, MaxWidth.ToString());
                        NewimgHtml = imgHtml.Replace(strWidth, NewWidth + " style=\"cursor:pointer;\" onclick=\"return show_orginral(this)\" title=\"点击看大图\"");

                        //高度处理
                        NewimgHtml = Regex.Replace(NewimgHtml, @" height=[""|\d]+ ", " ");

                        strSource = strSource.Replace(imgHtml, "<span>" + NewimgHtml + "<p align=\"center\"><a style=\"cursor:pointer;\" onclick=\"return show_orginral(this)\">点击看原图</a></p></span></p><p align=left>");
                    }
                }

                m = m.NextMatch();
            }

            //图片加滑轮
            //_message = Regex.Replace(_message, "<img ", "<img  onmousewheel=\"return bbimg(this)\" ", RegexOptions.IgnoreCase);

            /*
            //内部继续搜索
            //内部继续搜索 变量申明
            Regex innerRe = new Regex("[\u4e00-\u9fa5]"); //内部下则
            int iStart = 0; //开始搜索位置
            string strContent = string.Empty; //搜索内容
            Match innerMath;
            strre = @"<img.+点击看大图.+>";

            r = new Regex(strre, RegexOptions.IgnoreCase);
            m = r.Match(strSource);

            while (m.Success)
            {
                iStart = m.Index + m.Length;

                strContent = strSource.Substring(iStart, 200);

                innerMath = innerRe.Match(strContent);

                if (innerMath.Success == true)
                {
                    if (innerMath.Groups[0].Value == "图")
                    {
                        strSource = strSource.Insert(innerMath.Groups[0].Index, "点击开大图");
                    }
                }
                m = m.NextMatch();
            }
            */

            return strSource;
        }
        #endregion

        #region = DecodingBigEndianUnicode =
        /// <summary>
        /// Decodings the big endian unicode.
        /// </summary>
        ///  /// <remarks>
        /// 帮助解决网页和JS文件中的中文编码问题的小工具 
        /// http://thinhunan.cnblogs.com/archive/2005/12/27/305590.html
        /// </remarks>
        /// <param name="encodedString">The encoded string.</param>
        /// <returns></returns>
        public static string DecodingBigEndianUnicode(string encodedString)
        {
            Regex regUnicode = new Regex(@"\\u(?<1>[a-zA-Z0-9]{2})(?<2>[a-zA-Z0-9]{2})");
            MatchCollection mc = regUnicode.Matches(encodedString);
            string s = string.Empty;
            foreach (Match m in mc)
            {
                byte b1 = byte.Parse(m.Groups[1].Value, System.Globalization.NumberStyles.HexNumber);
                byte b2 = byte.Parse(m.Groups[2].Value, System.Globalization.NumberStyles.HexNumber);
                s += Encoding.BigEndianUnicode.GetString(new byte[] { b1, b2 });
            }
            return s;
        }
        #endregion

        #region = EncodingBigEndianUnicode =
        /// <summary>
        /// Encodings the big endian unicode.
        /// </summary>
        /// <param name="text">The text.</param>
        /// <remarks>
        /// 帮助解决网页和JS文件中的中文编码问题的小工具 
        /// http://thinhunan.cnblogs.com/archive/2005/12/27/305590.html
        /// </remarks>
        /// <returns></returns>
        public static string EncodingBigEndianUnicode(string text)
        {
            string s = string.Empty;
            for (int i = 0; i < text.Length; i++)
            {
                string s1 = text.Substring(i, 1);
                byte[] bs = Encoding.BigEndianUnicode.GetBytes(s1);
                s1 = @"\u";
                foreach (byte b in bs)
                {
                    string s2 = b.ToString("x");
                    if (s2.Length == 1)
                        s2 = "0" + s2;
                    s1 += s2;
                }
                s += s1;
            }
            return s;
        }
        #endregion

        #region = FillInteger =
        public static string FillInteger(int n, int length)
        {
            return FillInteger(n, length, '0');
        }

        /// <summary>
        /// Fills the integer.
        /// </summary>
        /// <param name="n">数字</param>
        /// <param name="length">填充的长度</param>
        /// <param name="c">填充的字符</param>
        /// <returns></returns>
        public static string FillInteger(int n, int length, char c)
        {
            string s = n.ToString();

            for (int i = s.Length; i < length; i++)
            {
                s = c.ToString() + s;
            }

            return s;
        }
        #endregion

        #region = ArrayToString =
        /// <summary>
        /// Arrays to string.
        /// </summary>
        /// <param name="s_array">The s_array.</param>
        /// <param name="SeparateChar">The separate char.</param>
        /// <returns></returns>
        public static string ArrayToString(string[] s_array, string SeparateChar)
        {
            StringBuilder str = new StringBuilder();

            foreach (string s in s_array)
            {
                str.Append(s);
                str.Append(SeparateChar);
            }

            return Regex.Replace(str.ToString(), SeparateChar + "$", string.Empty);
        }

        public static string ArrayToString(string[] s_array)
        {
            return ArrayToString(s_array, ",");
        }
        #endregion

        #region = Hit =
        /// <summary>
        /// 命中次数
        /// </summary>
        /// <param name="re">The re.</param>
        /// <param name="text">The text.</param>
        /// <returns></returns>
        public static int Hit(Regex re, string text)
        {
            MatchCollection mc = re.Matches(text);
            return mc.Count;
        }
        #endregion

        #region = HightLight =
        /// <summary>
        /// Hights the light.
        /// 高亮显示匹配的文字
        /// </summary>
        /// <param name="match">The match.</param>
        /// <remarks>MatchEvaluator</remarks>
        /// <example>
        /// Regex.Replace(input,pattern,CharHelper.HightLight);
        /// </example>
        public static string HightLight(Match match)
        {

            return "<span class=\"hightlight\">" + match.Value + "</span>";
        }
        #endregion

        #region = Zone =
        /// <summary>
        /// 提取关键字最多的字符串片断
        /// </summary>
        /// <param name="re">匹配规则</param>
        /// <param name="text">字符串</param>
        /// <param name="DisplayLength">片断大小</param>
        /// <returns></returns>
        public static string Zone(Regex re, string text, int DisplayLength)
        {
            DataTable oTable = new DataTable();
            oTable.Columns.Add(new DataColumn("num", typeof(int)));
            MatchCollection mc = re.Matches(text);

            //setp 1 装入datatable中准备运算
            foreach (Match m in mc)
            {
                DataRow dr = oTable.NewRow();
                dr["num"] = m.Index;

                oTable.Rows.Add(dr);
            }

            int min = 0; //范围的最小值
            int max = 0; //范围的最大值
            int count = 0; //范围命中个数

            foreach (DataRow dr in oTable.Rows)
            {
                int i = Convert.ToInt32(dr["num"]);

                DataRow[] drs = oTable.Select("num>=" + i.ToString() + " and num<" + (i + DisplayLength).ToString());
                if (count < drs.Length)
                {
                    min = i;
                    max = Convert.ToInt32(drs[drs.Length - 1]["num"]);
                    count = drs.Length;
                }
            }


            count = (DisplayLength - (min + max)) / 2;// 边缘字符数

            if (count > 0) //修正位置
            {
                if (min - count <= 0)
                {
                    min = 0;
                }
                else
                {
                    min -= count;
                }

            }

            //提取字符串
            if (min + DisplayLength < text.Length)
            {
                return text.Substring(min, DisplayLength) + "...";
            }
            else
            {
                return ".." + text.Substring(text.Length - DisplayLength);
            }
        }
        #endregion

        #region = SingleByteHex =
        public static string SingleByteHex(char c)
        {
            uint num1 = c;
            return num1.ToString("x").PadLeft(2, '0');
        }
        #endregion

        #region = TwoByteHex =
        public static string TwoByteHex(char c)
        {
            uint num1 = c;
            return num1.ToString("x").PadLeft(4, '0');
        }
        #endregion


        #region = Translate =
        /// <summary>
        /// 
        /// </summary>
        /// <param name="input"></param>
        /// <param name="lp">
        /// ar|en,阿拉伯文到英语测试版
        /// ko|en,朝鲜语到英语测试版
        /// de|fr",德语到法语
        /// de|en,德语到英语
        /// ru|en",俄语到英语测试版
        /// fr|de",法语到德语
        /// fr|en,法语到英语
        /// pt|en",葡萄牙语到英语
        /// ja|en,日语到英语测试版
        /// es|en,西班牙语到英语
        /// it|en,意大利语到英语
        /// en|ar",英语到阿拉伯文测试版
        /// en|ko,英语到朝鲜语测试版
        /// en|de,英语到德语
        /// en|ru,英语到俄语测试版
        /// en|fr,英语到法语
        /// en|pt,英语到葡萄牙语
        /// en|ja,英语到日语测试版
        /// en|es,英语到西班牙语
        /// en|it,英语到意大利语
        /// en|zh-TW,英语到中文(繁体)测试版
        /// en|zh-CN,英语到中文(简体)测试版
        /// zh|en",中文到英语测试版
        /// zh-TW|zh-CN,中文(繁体到简体)测试版
        /// zh-CN|zh-TW,中文(简体到繁体)测试版
        /// </param>
        /// <returns></returns>
        public static string Translate(string input, string lp)
        {
            string google = readHtmlPage("http://translate.google.com/translate_t", "text=" + input + "&langpair=" + lp + "&ie=UTF8&oe=UTF8");

            // string regex = "name=q rows=5 cols=45 wrap=PHYSICAL dir=ltr>([^/<]*)</textarea>";
            string regex = "<div id=result_box dir=ltr>([^/<]*)</div>";
            System.Text.RegularExpressions.RegexOptions options = ((System.Text.RegularExpressions.RegexOptions.Singleline | System.Text.RegularExpressions.RegexOptions.Multiline) | System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            System.Text.RegularExpressions.Regex reg = new System.Text.RegularExpressions.Regex(regex, options);

            string result = reg.Match(google).Groups[1].Value;
            return System.Web.HttpUtility.HtmlDecode(result);
        }

        private static string readHtmlPage(string url, string postDatas)
        {
            string result = string.Empty;
            string strPost = postDatas; // "key=value&key1=value2"
            Stream stream = null;

            System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();

            HttpWebRequest objRequest = (HttpWebRequest)WebRequest.Create(url);
            objRequest.CookieContainer = new CookieContainer();
            objRequest.Method = "POST";
            objRequest.ContentType = "application/x-www-form-urlencoded";

            byte[] byte1 = encoding.GetBytes(postDatas);
            objRequest.ContentLength = byte1.Length;

            using (stream = objRequest.GetRequestStream())
            {
                stream.Write(byte1, 0, byte1.Length);
            }

            HttpWebResponse objResponse = (HttpWebResponse)objRequest.GetResponse();
            CookieCollection cookies = objResponse.Cookies;

            System.Text.StringBuilder sb = null;
            if (objResponse.ContentLength > 0)
            {
                sb = new System.Text.StringBuilder((int)objResponse.ContentLength);
            }
            else
            {
                sb = new System.Text.StringBuilder();
            }
            using (Stream str = objResponse.GetResponseStream())
            {
                using (StreamReader reader = new StreamReader(str, true))
                {
                    int bufferSize = 1024;
                    char[] buffer = new char[bufferSize];
                    int pos = 0;
                    while ((pos = reader.Read(buffer, 0, bufferSize)) > 0)
                    {
                        sb.Append(buffer, 0, pos);
                    }
                    // content = reader.ReadToEnd();
                    reader.Close();
                }
            }

            if (objResponse != null)
            {
                objResponse.Close();
                objResponse = null;
            }

            return sb.ToString();
        }
        #endregion

        #region = WordClean =
        public static string WordClean(string text)
        {
            text = Regex.Replace(text, "<FONT[^>]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</FONT>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<U>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</U>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<H[^>]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</H[^>]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<B[^>]*>", "&bold", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</B[^>]*>", "&cbold", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<STRONG[^>]*>", "&bold", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</STRONG[^>]*>", "&cbold", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<I[^>]*>", "&ital", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</I[^>]*>", "&cital", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<EM[^>]*>", "&ital", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</EM[^>]*>", "&cital", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<UL[^>]*>", "&ultag", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<LI[^>]*>", "&litag", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<OL[^>]*>", "&oltag", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</OL>", "&olctag", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</LI>", "&lictag", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</UL>", "&ulctag", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&lt;[^>]&gt*;", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&lt;/[^>]&gt*;", " ", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<o:[^>]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</o:[^>]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<\\?xml:[^>]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</?st[^>]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<[^>]*<", "<", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<SPAN[^>]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<SPAN[^class]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "</SPAN>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "style=[^>]*", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "style=[^>]*'", " ", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "style=[^>]*>", ">", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "lang=[^>]*>", ">", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "name=[^>]* ", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "name=[^>]*>", ">", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "<A[^>]*>", string.Empty, RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&bold", "<b>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&cbold", "</b>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&ital", "<em>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&cital", "</em>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&ultag", "<ul>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&litag", "<li>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&oltag", "<ol>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&olctag", "</ol>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&lictag", "</li>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&ulctag", "</ul>", RegexOptions.IgnoreCase);
            text = Regex.Replace(text, "&parag", "<br/>", RegexOptions.IgnoreCase);

            return text;
        }
        #endregion

        #region 拼音处理 2008-10-28
        public static string GetPYString(string str)
        {
            if (string.IsNullOrWhiteSpace(str))
            {
                return "";
            }
            string tempStr = "";
            foreach (char c in str)
            {
                if ((int)c >= 33 && (int)c <= 126)
                {//字母和符号原样保留
                    tempStr += c.ToString();
                }
                else
                {//累加拼音声母
                    tempStr += GetPYChar(c.ToString());
                }
            }
            return tempStr;
        }

        public static string GetPYChar(string c)
        {
            byte[] array = new byte[2];
            if (c.Trim().Length <= 0)
            {
                return " ";
            }
            array = System.Text.Encoding.Default.GetBytes(c);
            if (c.Trim().Length <= 0 )
            {
                return "";
            }
            if (array == null || array.Length <= 1)
            {
                return "";
            }
            int i = (short)(array[0] - '\0') * 256 + ((short)(array[1] - '\0'));
            if (i < 0xB0A1) return "*";
            if (i < 0xB0C5) return "a";
            if (i < 0xB2C1) return "b";
            if (i < 0xB4EE) return "c";
            if (i < 0xB6EA) return "d";
            if (i < 0xB7A2) return "e";
            if (i < 0xB8C1) return "f";
            if (i < 0xB9FE) return "g";
            if (i < 0xBBF7) return "h";
            if (i < 0xBFA6) return "j";
            if (i < 0xC0AC) return "k";
            if (i < 0xC2E8) return "l";
            if (i < 0xC4C3) return "m";
            if (i < 0xC5B6) return "n";
            if (i < 0xC5BE) return "o";
            if (i < 0xC6DA) return "p";
            if (i < 0xC8BB) return "q";
            if (i < 0xC8F6) return "r";
            if (i < 0xCBFA) return "s";
            if (i < 0xCDDA) return "t";
            if (i < 0xCEF4) return "w";
            if (i < 0xD1B9) return "x";
            if (i < 0xD4D1) return "y";
            if (i < 0xD7FA) return "z";
            return "*";
        }
        #endregion

        #region 去除特殊字符 2008-10-31
        public static string RemoveSpecialChar(string str)
        {
            if (!string.IsNullOrEmpty(str))
            {
                string strSpecial = "`~!@#$%^&^*()_+|}{\\\":?></.;'[]-=";
                foreach (char c in strSpecial.ToCharArray())
                {
                    if (str.Contains(c.ToString()))
                    {
                        str = str.Replace(c.ToString(), "");
                    }
                }
            }
            return str;
        }

        /// <summary>
        /// 去除特殊字符
        /// </summary>
        /// <param name="str">需要处理的字符串</param>
        /// <param name="exceptstr">不需要去除的字符</param>
        /// <returns></returns>
        public static string RemoveSpecialChar(string str, string exceptstr)
        {
            if (!string.IsNullOrEmpty(str))
            {
                string strSpecial = "`~!@#$%^&^*()_+|}{\\\":?></.,;'[]-=";
                foreach (char c in exceptstr.ToCharArray())
                {
                    strSpecial = strSpecial.Replace(c.ToString(), "");
                }
                foreach (char c in strSpecial.ToCharArray())
                {
                    if (str.Contains(c.ToString()))
                    {
                        str = str.Replace(c.ToString(), "");
                    }
                }
            }
            return str;
        }
        #endregion
    }
    #endregion
}
